namespace Ama.CRDT.Services;

using Ama.CRDT.Models;
using System.Diagnostics.CodeAnalysis;

/// <summary>
/// Defines a service for managing CRDT metadata. Its responsibilities include initializing, resetting,
/// and compacting metadata state such as LWW timestamps, positional trackers, and version vectors.
/// </summary>
public interface ICrdtMetadataManager
{
    /// <summary>
    /// Creates and initializes a new <see cref="CrdtMetadata"/> object for a given document.
    /// This method recursively traverses the document, populating LWW timestamps and initializing positional trackers.
    /// It uses a timestamp generated by the configured <see cref="ICrdtTimestampProvider"/>.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The document object to initialize metadata for.</param>
    /// <returns>A new, initialized <see cref="CrdtMetadata"/> object.</returns>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="document"/> is null.</exception>
    CrdtMetadata Initialize<T>([DisallowNull] T document) where T : class;

    /// <summary>
    /// Creates and initializes a new <see cref="CrdtMetadata"/> object for a given document with a specific timestamp.
    /// This method recursively traverses the document, populating LWW timestamps and initializing positional trackers.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The document object to initialize metadata for.</param>
    /// <param name="timestamp">The timestamp to use for initialization.</param>
    /// <returns>A new, initialized <see cref="CrdtMetadata"/> object.</returns>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="document"/> or <paramref name="timestamp"/> is null.</exception>
    CrdtMetadata Initialize<T>([DisallowNull] T document, [DisallowNull] ICrdtTimestamp timestamp) where T : class;

    /// <summary>
    /// Populates an existing <see cref="CrdtMetadata"/> object with LWW and positional information from a document.
    /// It uses a timestamp generated by the configured <see cref="ICrdtTimestampProvider"/>.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="metadata">The metadata object to populate.</param>
    /// <param name="document">The document object from which to derive metadata.</param>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="document"/> is null.</exception>
    void InitializeLwwMetadata<T>([DisallowNull] CrdtMetadata metadata, [DisallowNull] T document) where T : class;

    /// <summary>
    /// Populates an existing <see cref="CrdtMetadata"/> object with LWW and positional information from a document using a specific timestamp.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="metadata">The metadata object to populate.</param>
    /// <param name="document">The document object from which to derive metadata.</param>
    /// <param name="timestamp">The timestamp to use for initialization.</param>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="metadata"/>, <paramref name="document"/>, or <paramref name="timestamp"/> is null.</exception>
    void InitializeLwwMetadata<T>([DisallowNull] CrdtMetadata metadata, [DisallowNull] T document, [DisallowNull] ICrdtTimestamp timestamp) where T : class;

    /// <summary>
    /// Resets an existing <see cref="CrdtMetadata"/> object and re-initializes it from a document.
    /// It uses a timestamp generated by the configured <see cref="ICrdtTimestampProvider"/>.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="metadata">The metadata object to reset.</param>
    /// <param name="document">The document object from which to derive metadata.</param>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="document"/> is null.</exception>
    void Reset<T>([DisallowNull] CrdtMetadata metadata, [DisallowNull] T document) where T : class;

    /// <summary>
    /// Resets an existing <see cref="CrdtMetadata"/> object and re-initializes it from a document using a specific timestamp.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="metadata">The metadata object to reset.</param>
    /// <param name="document">The document object from which to derive metadata.</param>
    /// <param name="timestamp">The timestamp to use for initialization.</param>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="metadata"/>, <paramref name="document"/>, or <paramref name="timestamp"/> is null.</exception>
    void Reset<T>([DisallowNull] CrdtMetadata metadata, [DisallowNull] T document, [DisallowNull] ICrdtTimestamp timestamp) where T : class;

    /// <summary>
    /// Removes LWW tombstones from the metadata that are older than the specified threshold.
    /// </summary>
    /// <param name="metadata">The metadata object to prune.</param>
    /// <param name="threshold">The timestamp threshold. Any LWW entry older than this will be removed.</param>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="threshold"/> is null.</exception>
    void PruneLwwTombstones([DisallowNull] CrdtMetadata metadata, [DisallowNull] ICrdtTimestamp threshold);
    
    /// <summary>
    /// Advances the version vector for the replica that generated the operation, pruning any covered exceptions.
    /// </summary>
    /// <param name="metadata">The metadata object to update.</param>
    /// <param name="operation">The operation whose replica and timestamp will be used to advance the vector.</param>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="metadata"/> is null.</exception>
    void AdvanceVersionVector([DisallowNull] CrdtMetadata metadata, CrdtOperation operation);

    /// <summary>
    /// Advances the version vector for a specific replica with a given timestamp, pruning any covered exceptions.
    /// </summary>
    /// <param name="metadata">The metadata object to update.</param>
    /// <param name="replicaId">The ID of the replica whose version vector is being advanced.</param>
    /// <param name="timestamp">The new timestamp for the replica's version vector.</param>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="timestamp"/> is null.</exception>
    /// <exception cref="ArgumentException">Thrown if <paramref name="replicaId"/> is null or whitespace.</exception>
    void AdvanceVersionVector([DisallowNull] CrdtMetadata metadata, string replicaId, [DisallowNull] ICrdtTimestamp timestamp);
}