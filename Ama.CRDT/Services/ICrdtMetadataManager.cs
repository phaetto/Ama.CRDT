namespace Ama.CRDT.Services;

using Ama.CRDT.Models;
using System.Diagnostics.CodeAnalysis;

/// <summary>
/// Defines a service for managing CRDT metadata. Its responsibilities include initializing, resetting,
/// cloning, and compacting metadata state such as LWW timestamps, positional trackers, and version vectors.
/// This service is critical for enabling conflict-free merges by externalizing the state needed for resolution.
/// </summary>
public interface ICrdtMetadataManager
{
    /// <summary>
    /// Creates and initializes a new <see cref="CrdtMetadata"/> object for a given document.
    /// This method recursively traverses the document, populating LWW timestamps and initializing trackers for various strategies.
    /// It uses a timestamp generated by the configured <see cref="ICrdtTimestampProvider"/>.
    /// This is a foundational step that establishes the initial state baseline for future patch generation and application.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The document object to initialize metadata for.</param>
    /// <returns>A new, initialized <see cref="CrdtMetadata"/> object.</returns>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="document"/> is null.</exception>
    /// <example>
    /// <code>
    /// <![CDATA[
    /// var user = new User { Name = "Alice", Age = 30 };
    /// // metadataManager is an injected instance of ICrdtMetadataManager
    /// var metadata = metadataManager.Initialize(user);
    /// // Now 'metadata' contains LWW timestamps for 'Name' and 'Age' properties.
    /// ]]>
    /// </code>
    /// </example>
    CrdtMetadata Initialize<T>([DisallowNull] T document) where T : class;

    /// <summary>
    /// Creates and initializes a new <see cref="CrdtMetadata"/> object for a given document with a specific timestamp.
    /// This overload is useful for creating a consistent state snapshot at a known point in time.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The document object to initialize metadata for.</param>
    /// <param name="timestamp">The timestamp to use for initialization.</param>
    /// <returns>A new, initialized <see cref="CrdtMetadata"/> object.</returns>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="document"/> or <paramref name="timestamp"/> is null.</exception>
    CrdtMetadata Initialize<T>([DisallowNull] T document, [DisallowNull] ICrdtTimestamp timestamp) where T : class;

    /// <summary>
    /// Populates an existing <see cref="CrdtMetadata"/> object with state derived from a document.
    /// It uses a timestamp generated by the configured <see cref="ICrdtTimestampProvider"/>.
    /// This method is essential for all strategies that derive state from the document, including LWW, sequence, and set-based strategies.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The CRDT document containing the data to derive metadata from and the metadata object to populate.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="document"/>, <paramref name="document"/>.Metadata or <paramref name="document"/>.Data is null.</exception>
    void Initialize<T>(CrdtDocument<T> document) where T : class;



    /// <summary>
    /// Populates an existing <see cref="CrdtMetadata"/> object with state derived from a document using a specific timestamp.
    /// This method is essential for all strategies that derive state from the document, including LWW, sequence, and set-based strategies.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The CRDT document containing the data to derive metadata from and the metadata object to populate.</param>
    /// <param name="timestamp">The timestamp to use for initialization.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="document"/>, <paramref name="document"/>.Metadata, <paramref name="document"/>.Data, or <paramref name="timestamp"/> is null.</exception>
    void Initialize<T>(CrdtDocument<T> document, [DisallowNull] ICrdtTimestamp timestamp) where T : class;

    /// <summary>
    /// Resets an existing <see cref="CrdtMetadata"/> object and re-initializes it from a document's current state.
    /// It uses a timestamp generated by the configured <see cref="ICrdtTimestampProvider"/>.
    /// This is useful when a full resynchronization of metadata is required, for instance, after loading a document from a snapshot or after a major structural change.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The CRDT document containing the data to derive metadata from and the metadata object to reset.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="document"/>, <paramref name="document"/>.Metadata or <paramref name="document"/>.Data is null.</exception>
    void Reset<T>(CrdtDocument<T> document) where T : class;

    /// <summary>
    /// Resets an existing <see cref="CrdtMetadata"/> object and re-initializes it from a document using a specific timestamp.
    /// This is useful when a full resynchronization of metadata is required at a known point in time.
    /// </summary>
    /// <typeparam name="T">The type of the document.</typeparam>
    /// <param name="document">The CRDT document containing the data to derive metadata from and the metadata object to reset.</param>
    /// <param name="timestamp">The timestamp to use for initialization.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="document"/>, <paramref name="document"/>.Metadata, <paramref name="document"/>.Data, or <paramref name="timestamp"/> is null.</exception>
    void Reset<T>(CrdtDocument<T> document, [DisallowNull] ICrdtTimestamp timestamp) where T : class;

    /// <summary>
    /// Creates a deep clone of the provided metadata object.
    /// This is a general-purpose utility that benefits any workflow requiring an isolated copy of the metadata,
    /// such as for speculative application of patches or for maintaining state snapshots for debugging.
    /// </summary>
    /// <param name="metadata">The metadata object to clone.</param>
    /// <returns>A new <see cref="CrdtMetadata"/> object with all properties copied.</returns>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="metadata"/> is null.</exception>
    /// <example>
    /// <code>
    /// <![CDATA[
    /// var originalMetadata = metadataManager.Initialize(myDoc);
    /// var clonedMetadata = metadataManager.Clone(originalMetadata);
    /// // 'clonedMetadata' is now an independent copy of 'originalMetadata'.
    /// // Changes to one will not affect the other.
    /// ]]>
    /// </code>
    /// </example>
    CrdtMetadata Clone([DisallowNull] CrdtMetadata metadata);

    /// <summary>
    /// Removes LWW tombstones from the metadata that are older than the specified threshold.
    /// This helps in managing metadata growth by garbage-collecting outdated entries. It is primarily beneficial for strategies that rely on LWW logic, such as `LwwStrategy` and `FixedSizeArrayStrategy`.
    /// </summary>
    /// <param name="metadata">The metadata object to prune.</param>
    /// <param name="threshold">The timestamp threshold. Any LWW entry older than this will be removed.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="threshold"/> is null.</exception>
    void PruneLwwTombstones([DisallowNull] CrdtMetadata metadata, [DisallowNull] ICrdtTimestamp threshold);
    
    /// <summary>
    /// Advances the version vector for the replica that generated the operation, pruning any covered exceptions.
    /// This is a core causality tracking mechanism used by the applicator to prevent duplicate operation application.
    /// By tracking the latest seen timestamp for each replica, it ensures that an operation is applied only once.
    /// </summary>
    /// <param name="metadata">The metadata object to update.</param>
    /// <param name="operation">The operation whose replica and timestamp will be used to advance the vector.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="operation"/> is null.</exception>
    void AdvanceVersionVector([DisallowNull] CrdtMetadata metadata, CrdtOperation operation);

    /// <summary>
    /// Advances the version vector for a specific replica with a given timestamp, pruning any covered exceptions.
    /// This is a core causality tracking mechanism used by the applicator to prevent duplicate operation application.
    /// </summary>
    /// <param name="metadata">The metadata object to update.</param>
    /// <param name="replicaId">The ID of the replica whose version vector is being advanced.</param>
    /// <param name="timestamp">The new timestamp for the replica's version vector.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="timestamp"/> is null.</exception>
    /// <exception cref="System.ArgumentException">Thrown if <paramref name="replicaId"/> is null or whitespace.</exception>
    void AdvanceVersionVector([DisallowNull] CrdtMetadata metadata, string replicaId, [DisallowNull] ICrdtTimestamp timestamp);
    
    /// <summary>
    /// Acquires an exclusive lock on a property using a Last-Writer-Wins (LWW) rule.
    /// If the provided timestamp is greater than the existing lock's timestamp, the lock is updated with the new holder.
    /// This is used by the <c>ExclusiveLockStrategy</c> to control access to a specific property.
    /// </summary>
    /// <param name="metadata">The metadata object to update.</param>
    /// <param name="path">The JSON path to the property to lock.</param>
    /// <param name="lockHolderId">The identifier of the new lock holder.</param>
    /// <param name="timestamp">The timestamp of the lock operation.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="timestamp"/> is null.</exception>
    /// <exception cref="System.ArgumentException">Thrown if <paramref name="path"/> or <paramref name="lockHolderId"/> is null or whitespace.</exception>
    void ExclusiveLock([DisallowNull] CrdtMetadata metadata, string path, string lockHolderId, [DisallowNull] ICrdtTimestamp timestamp);

    /// <summary>
    /// Releases an exclusive lock on a property using a Last-Writer-Wins (LWW) rule.
    /// If the provided timestamp is greater than the existing lock's timestamp, the lock is released.
    /// This allows for conflict-free, optimistic locking where the latest operation (lock or unlock) wins.
    /// </summary>
    /// <param name="metadata">The metadata object to update.</param>
    /// <param name="path">The JSON path to the property to unlock.</param>
    /// <param name="timestamp">The timestamp of the unlock operation.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="timestamp"/> is null.</exception>
    /// <exception cref="System.ArgumentException">Thrown if <paramref name="path"/> is null or whitespace.</exception>
    void ReleaseLock([DisallowNull] CrdtMetadata metadata, string path, [DisallowNull] ICrdtTimestamp timestamp);
}