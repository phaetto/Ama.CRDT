#nullable enable
Ama.CRDT.Attributes.CrdtArrayLcsStrategyAttribute
Ama.CRDT.Attributes.CrdtArrayLcsStrategyAttribute.CrdtArrayLcsStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtAverageRegisterStrategyAttribute
Ama.CRDT.Attributes.CrdtAverageRegisterStrategyAttribute.CrdtAverageRegisterStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtBoundedCounterStrategyAttribute
Ama.CRDT.Attributes.CrdtBoundedCounterStrategyAttribute.CrdtBoundedCounterStrategyAttribute(long min, long max) -> void
Ama.CRDT.Attributes.CrdtBoundedCounterStrategyAttribute.Max.get -> long
Ama.CRDT.Attributes.CrdtBoundedCounterStrategyAttribute.Min.get -> long
Ama.CRDT.Attributes.CrdtCounterMapStrategyAttribute
Ama.CRDT.Attributes.CrdtCounterMapStrategyAttribute.CrdtCounterMapStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtCounterStrategyAttribute
Ama.CRDT.Attributes.CrdtCounterStrategyAttribute.CrdtCounterStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtExclusiveLockStrategyAttribute
Ama.CRDT.Attributes.CrdtExclusiveLockStrategyAttribute.CrdtExclusiveLockStrategyAttribute(string! lockHolderPropertyPath) -> void
Ama.CRDT.Attributes.CrdtExclusiveLockStrategyAttribute.LockHolderPropertyPath.get -> string!
Ama.CRDT.Attributes.CrdtFixedSizeArrayStrategyAttribute
Ama.CRDT.Attributes.CrdtFixedSizeArrayStrategyAttribute.CrdtFixedSizeArrayStrategyAttribute(int size) -> void
Ama.CRDT.Attributes.CrdtFixedSizeArrayStrategyAttribute.Size.get -> int
Ama.CRDT.Attributes.CrdtGCounterStrategyAttribute
Ama.CRDT.Attributes.CrdtGCounterStrategyAttribute.CrdtGCounterStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtGraphStrategyAttribute
Ama.CRDT.Attributes.CrdtGraphStrategyAttribute.CrdtGraphStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtGSetStrategyAttribute
Ama.CRDT.Attributes.CrdtGSetStrategyAttribute.CrdtGSetStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtLseqStrategyAttribute
Ama.CRDT.Attributes.CrdtLseqStrategyAttribute.CrdtLseqStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtLwwMapStrategyAttribute
Ama.CRDT.Attributes.CrdtLwwMapStrategyAttribute.CrdtLwwMapStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtLwwSetStrategyAttribute
Ama.CRDT.Attributes.CrdtLwwSetStrategyAttribute.CrdtLwwSetStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtLwwStrategyAttribute
Ama.CRDT.Attributes.CrdtLwwStrategyAttribute.CrdtLwwStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtMaxWinsMapStrategyAttribute
Ama.CRDT.Attributes.CrdtMaxWinsMapStrategyAttribute.CrdtMaxWinsMapStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtMaxWinsStrategyAttribute
Ama.CRDT.Attributes.CrdtMaxWinsStrategyAttribute.CrdtMaxWinsStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtMinWinsMapStrategyAttribute
Ama.CRDT.Attributes.CrdtMinWinsMapStrategyAttribute.CrdtMinWinsMapStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtMinWinsStrategyAttribute
Ama.CRDT.Attributes.CrdtMinWinsStrategyAttribute.CrdtMinWinsStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtOrMapStrategyAttribute
Ama.CRDT.Attributes.CrdtOrMapStrategyAttribute.CrdtOrMapStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtOrSetStrategyAttribute
Ama.CRDT.Attributes.CrdtOrSetStrategyAttribute.CrdtOrSetStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtPriorityQueueStrategyAttribute
Ama.CRDT.Attributes.CrdtPriorityQueueStrategyAttribute.CrdtPriorityQueueStrategyAttribute(string! priorityPropertyName) -> void
Ama.CRDT.Attributes.CrdtPriorityQueueStrategyAttribute.PriorityPropertyName.get -> string!
Ama.CRDT.Attributes.CrdtReplicatedTreeStrategyAttribute
Ama.CRDT.Attributes.CrdtReplicatedTreeStrategyAttribute.CrdtReplicatedTreeStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtSortedSetStrategyAttribute
Ama.CRDT.Attributes.CrdtSortedSetStrategyAttribute.CrdtSortedSetStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtSortedSetStrategyAttribute.CrdtSortedSetStrategyAttribute(string! sortPropertyName) -> void
Ama.CRDT.Attributes.CrdtSortedSetStrategyAttribute.SortPropertyName.get -> string?
Ama.CRDT.Attributes.CrdtStateMachineStrategyAttribute
Ama.CRDT.Attributes.CrdtStateMachineStrategyAttribute.CrdtStateMachineStrategyAttribute(System.Type! validatorType) -> void
Ama.CRDT.Attributes.CrdtStateMachineStrategyAttribute.ValidatorType.get -> System.Type!
Ama.CRDT.Attributes.CrdtStrategyAttribute
Ama.CRDT.Attributes.CrdtStrategyAttribute.CrdtStrategyAttribute(System.Type! strategyType) -> void
Ama.CRDT.Attributes.CrdtStrategyAttribute.StrategyType.get -> System.Type!
Ama.CRDT.Attributes.CrdtSupportedTypeAttribute
Ama.CRDT.Attributes.CrdtSupportedTypeAttribute.CrdtSupportedTypeAttribute(System.Type! supportedType) -> void
Ama.CRDT.Attributes.CrdtSupportedTypeAttribute.SupportedType.get -> System.Type!
Ama.CRDT.Attributes.CrdtTwoPhaseGraphStrategyAttribute
Ama.CRDT.Attributes.CrdtTwoPhaseGraphStrategyAttribute.CrdtTwoPhaseGraphStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtTwoPhaseSetStrategyAttribute
Ama.CRDT.Attributes.CrdtTwoPhaseSetStrategyAttribute.CrdtTwoPhaseSetStrategyAttribute() -> void
Ama.CRDT.Attributes.CrdtVoteCounterStrategyAttribute
Ama.CRDT.Attributes.CrdtVoteCounterStrategyAttribute.CrdtVoteCounterStrategyAttribute() -> void
Ama.CRDT.Attributes.Strategies.AssociativeAttribute
Ama.CRDT.Attributes.Strategies.AssociativeAttribute.AssociativeAttribute() -> void
Ama.CRDT.Attributes.Strategies.CommutativeAttribute
Ama.CRDT.Attributes.Strategies.CommutativeAttribute.CommutativeAttribute() -> void
Ama.CRDT.Attributes.Strategies.IdempotentAttribute
Ama.CRDT.Attributes.Strategies.IdempotentAttribute.IdempotentAttribute() -> void
Ama.CRDT.Attributes.Strategies.IdempotentWithContinuousTimeAttribute
Ama.CRDT.Attributes.Strategies.IdempotentWithContinuousTimeAttribute.IdempotentWithContinuousTimeAttribute() -> void
Ama.CRDT.Attributes.Strategies.MergeableAttribute
Ama.CRDT.Attributes.Strategies.MergeableAttribute.MergeableAttribute() -> void
Ama.CRDT.Attributes.Strategies.SequentialOperationsAttribute
Ama.CRDT.Attributes.Strategies.SequentialOperationsAttribute.SequentialOperationsAttribute() -> void
Ama.CRDT.Extensions.IStateMachine<TState>
Ama.CRDT.Extensions.IStateMachine<TState>.IsValidTransition(TState from, TState to) -> bool
Ama.CRDT.Extensions.ServiceCollectionExtensions
Ama.CRDT.Models.AverageRegisterValue
Ama.CRDT.Models.AverageRegisterValue.AverageRegisterValue() -> void
Ama.CRDT.Models.AverageRegisterValue.AverageRegisterValue(decimal Value, Ama.CRDT.Models.ICrdtTimestamp! Timestamp) -> void
Ama.CRDT.Models.AverageRegisterValue.Deconstruct(out decimal Value, out Ama.CRDT.Models.ICrdtTimestamp! Timestamp) -> void
Ama.CRDT.Models.AverageRegisterValue.Equals(Ama.CRDT.Models.AverageRegisterValue other) -> bool
Ama.CRDT.Models.AverageRegisterValue.Timestamp.get -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Models.AverageRegisterValue.Timestamp.init -> void
Ama.CRDT.Models.AverageRegisterValue.Value.get -> decimal
Ama.CRDT.Models.AverageRegisterValue.Value.init -> void
Ama.CRDT.Models.CrdtDocument<T>
Ama.CRDT.Models.CrdtDocument<T>.CrdtDocument() -> void
Ama.CRDT.Models.CrdtDocument<T>.CrdtDocument(T? data) -> void
Ama.CRDT.Models.CrdtDocument<T>.CrdtDocument(T? data, Ama.CRDT.Models.CrdtMetadata? metadata) -> void
Ama.CRDT.Models.CrdtDocument<T>.Data.get -> T?
Ama.CRDT.Models.CrdtDocument<T>.Metadata.get -> Ama.CRDT.Models.CrdtMetadata?
Ama.CRDT.Models.CrdtGraph
Ama.CRDT.Models.CrdtGraph.<Clone>$() -> Ama.CRDT.Models.CrdtGraph!
Ama.CRDT.Models.CrdtGraph.CrdtGraph() -> void
Ama.CRDT.Models.CrdtGraph.Edges.get -> System.Collections.Generic.ISet<Ama.CRDT.Models.Edge>!
Ama.CRDT.Models.CrdtGraph.Edges.set -> void
Ama.CRDT.Models.CrdtGraph.Equals(Ama.CRDT.Models.CrdtGraph? other) -> bool
Ama.CRDT.Models.CrdtGraph.Vertices.get -> System.Collections.Generic.ISet<object!>!
Ama.CRDT.Models.CrdtGraph.Vertices.set -> void
Ama.CRDT.Models.CrdtMetadata
Ama.CRDT.Models.CrdtMetadata.<Clone>$() -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Models.CrdtMetadata.AverageRegisters.get -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.AverageRegisterValue>!>!
Ama.CRDT.Models.CrdtMetadata.AverageRegisters.set -> void
Ama.CRDT.Models.CrdtMetadata.CounterMaps.get -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.PnCounterState!>!>!
Ama.CRDT.Models.CrdtMetadata.CounterMaps.set -> void
Ama.CRDT.Models.CrdtMetadata.CrdtMetadata() -> void
Ama.CRDT.Models.CrdtMetadata.Equals(Ama.CRDT.Models.CrdtMetadata? other) -> bool
Ama.CRDT.Models.CrdtMetadata.ExclusiveLocks.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.LockInfo?>!
Ama.CRDT.Models.CrdtMetadata.ExclusiveLocks.set -> void
Ama.CRDT.Models.CrdtMetadata.LseqTrackers.get -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.List<Ama.CRDT.Models.LseqItem>!>!
Ama.CRDT.Models.CrdtMetadata.LseqTrackers.set -> void
Ama.CRDT.Models.CrdtMetadata.Lww.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.ICrdtTimestamp!>!
Ama.CRDT.Models.CrdtMetadata.Lww.set -> void
Ama.CRDT.Models.CrdtMetadata.LwwMaps.get -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.ICrdtTimestamp!>!>!
Ama.CRDT.Models.CrdtMetadata.LwwMaps.set -> void
Ama.CRDT.Models.CrdtMetadata.LwwSets.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.LwwSetState!>!
Ama.CRDT.Models.CrdtMetadata.LwwSets.set -> void
Ama.CRDT.Models.CrdtMetadata.OrMaps.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.OrSetState!>!
Ama.CRDT.Models.CrdtMetadata.OrMaps.set -> void
Ama.CRDT.Models.CrdtMetadata.OrSets.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.OrSetState!>!
Ama.CRDT.Models.CrdtMetadata.OrSets.set -> void
Ama.CRDT.Models.CrdtMetadata.PositionalTrackers.get -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.List<Ama.CRDT.Models.PositionalIdentifier>!>!
Ama.CRDT.Models.CrdtMetadata.PositionalTrackers.set -> void
Ama.CRDT.Models.CrdtMetadata.PriorityQueues.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.LwwSetState!>!
Ama.CRDT.Models.CrdtMetadata.PriorityQueues.set -> void
Ama.CRDT.Models.CrdtMetadata.ReplicatedTrees.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.OrSetState!>!
Ama.CRDT.Models.CrdtMetadata.ReplicatedTrees.set -> void
Ama.CRDT.Models.CrdtMetadata.SeenExceptions.get -> System.Collections.Generic.ISet<Ama.CRDT.Models.CrdtOperation>!
Ama.CRDT.Models.CrdtMetadata.SeenExceptions.set -> void
Ama.CRDT.Models.CrdtMetadata.TwoPhaseGraphs.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.TwoPhaseGraphState!>!
Ama.CRDT.Models.CrdtMetadata.TwoPhaseGraphs.set -> void
Ama.CRDT.Models.CrdtMetadata.TwoPhaseSets.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.TwoPhaseSetState!>!
Ama.CRDT.Models.CrdtMetadata.TwoPhaseSets.set -> void
Ama.CRDT.Models.CrdtMetadata.VersionVector.get -> System.Collections.Generic.IDictionary<string!, Ama.CRDT.Models.ICrdtTimestamp!>!
Ama.CRDT.Models.CrdtMetadata.VersionVector.set -> void
Ama.CRDT.Models.CrdtOperation
Ama.CRDT.Models.CrdtOperation.CrdtOperation() -> void
Ama.CRDT.Models.CrdtOperation.CrdtOperation(System.Guid Id, string! ReplicaId, string! JsonPath, Ama.CRDT.Models.OperationType Type, object? Value, Ama.CRDT.Models.ICrdtTimestamp! Timestamp) -> void
Ama.CRDT.Models.CrdtOperation.Deconstruct(out System.Guid Id, out string! ReplicaId, out string! JsonPath, out Ama.CRDT.Models.OperationType Type, out object? Value, out Ama.CRDT.Models.ICrdtTimestamp! Timestamp) -> void
Ama.CRDT.Models.CrdtOperation.Equals(Ama.CRDT.Models.CrdtOperation other) -> bool
Ama.CRDT.Models.CrdtOperation.Id.get -> System.Guid
Ama.CRDT.Models.CrdtOperation.Id.init -> void
Ama.CRDT.Models.CrdtOperation.JsonPath.get -> string!
Ama.CRDT.Models.CrdtOperation.JsonPath.init -> void
Ama.CRDT.Models.CrdtOperation.ReplicaId.get -> string!
Ama.CRDT.Models.CrdtOperation.ReplicaId.init -> void
Ama.CRDT.Models.CrdtOperation.Timestamp.get -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Models.CrdtOperation.Timestamp.init -> void
Ama.CRDT.Models.CrdtOperation.Type.get -> Ama.CRDT.Models.OperationType
Ama.CRDT.Models.CrdtOperation.Type.init -> void
Ama.CRDT.Models.CrdtOperation.Value.get -> object?
Ama.CRDT.Models.CrdtOperation.Value.init -> void
Ama.CRDT.Models.CrdtPatch
Ama.CRDT.Models.CrdtPatch.CrdtPatch() -> void
Ama.CRDT.Models.CrdtPatch.CrdtPatch(System.Collections.Generic.IReadOnlyList<Ama.CRDT.Models.CrdtOperation>! Operations) -> void
Ama.CRDT.Models.CrdtPatch.Deconstruct(out System.Collections.Generic.IReadOnlyList<Ama.CRDT.Models.CrdtOperation>! Operations) -> void
Ama.CRDT.Models.CrdtPatch.Equals(Ama.CRDT.Models.CrdtPatch other) -> bool
Ama.CRDT.Models.CrdtPatch.Operations.get -> System.Collections.Generic.IReadOnlyList<Ama.CRDT.Models.CrdtOperation>!
Ama.CRDT.Models.CrdtPatch.Operations.init -> void
Ama.CRDT.Models.CrdtTree
Ama.CRDT.Models.CrdtTree.<Clone>$() -> Ama.CRDT.Models.CrdtTree!
Ama.CRDT.Models.CrdtTree.CrdtTree() -> void
Ama.CRDT.Models.CrdtTree.Equals(Ama.CRDT.Models.CrdtTree? other) -> bool
Ama.CRDT.Models.CrdtTree.Nodes.get -> System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.TreeNode!>!
Ama.CRDT.Models.CrdtTree.Nodes.set -> void
Ama.CRDT.Models.Edge
Ama.CRDT.Models.Edge.Data.get -> object?
Ama.CRDT.Models.Edge.Data.init -> void
Ama.CRDT.Models.Edge.Deconstruct(out object! Source, out object! Target, out object? Data) -> void
Ama.CRDT.Models.Edge.Edge() -> void
Ama.CRDT.Models.Edge.Edge(object! Source, object! Target, object? Data) -> void
Ama.CRDT.Models.Edge.Equals(Ama.CRDT.Models.Edge other) -> bool
Ama.CRDT.Models.Edge.Source.get -> object!
Ama.CRDT.Models.Edge.Source.init -> void
Ama.CRDT.Models.Edge.Target.get -> object!
Ama.CRDT.Models.Edge.Target.init -> void
Ama.CRDT.Models.EpochTimestamp
Ama.CRDT.Models.EpochTimestamp.CompareTo(Ama.CRDT.Models.ICrdtTimestamp? other) -> int
Ama.CRDT.Models.EpochTimestamp.Deconstruct(out long Value) -> void
Ama.CRDT.Models.EpochTimestamp.EpochTimestamp() -> void
Ama.CRDT.Models.EpochTimestamp.EpochTimestamp(long Value) -> void
Ama.CRDT.Models.EpochTimestamp.Equals(Ama.CRDT.Models.EpochTimestamp other) -> bool
Ama.CRDT.Models.EpochTimestamp.Value.get -> long
Ama.CRDT.Models.EpochTimestamp.Value.init -> void
Ama.CRDT.Models.ExclusiveLockPayload
Ama.CRDT.Models.ExclusiveLockPayload.Deconstruct(out object? Value, out string? LockHolderId) -> void
Ama.CRDT.Models.ExclusiveLockPayload.Equals(Ama.CRDT.Models.ExclusiveLockPayload other) -> bool
Ama.CRDT.Models.ExclusiveLockPayload.ExclusiveLockPayload() -> void
Ama.CRDT.Models.ExclusiveLockPayload.ExclusiveLockPayload(object? Value, string? LockHolderId) -> void
Ama.CRDT.Models.ExclusiveLockPayload.LockHolderId.get -> string?
Ama.CRDT.Models.ExclusiveLockPayload.LockHolderId.init -> void
Ama.CRDT.Models.ExclusiveLockPayload.Value.get -> object?
Ama.CRDT.Models.ExclusiveLockPayload.Value.init -> void
Ama.CRDT.Models.GraphEdgePayload
Ama.CRDT.Models.GraphEdgePayload.Deconstruct(out Ama.CRDT.Models.Edge Edge) -> void
Ama.CRDT.Models.GraphEdgePayload.Edge.get -> Ama.CRDT.Models.Edge
Ama.CRDT.Models.GraphEdgePayload.Edge.init -> void
Ama.CRDT.Models.GraphEdgePayload.Equals(Ama.CRDT.Models.GraphEdgePayload other) -> bool
Ama.CRDT.Models.GraphEdgePayload.GraphEdgePayload() -> void
Ama.CRDT.Models.GraphEdgePayload.GraphEdgePayload(Ama.CRDT.Models.Edge Edge) -> void
Ama.CRDT.Models.GraphVertexPayload
Ama.CRDT.Models.GraphVertexPayload.Deconstruct(out object! Vertex) -> void
Ama.CRDT.Models.GraphVertexPayload.Equals(Ama.CRDT.Models.GraphVertexPayload other) -> bool
Ama.CRDT.Models.GraphVertexPayload.GraphVertexPayload() -> void
Ama.CRDT.Models.GraphVertexPayload.GraphVertexPayload(object! Vertex) -> void
Ama.CRDT.Models.GraphVertexPayload.Vertex.get -> object!
Ama.CRDT.Models.GraphVertexPayload.Vertex.init -> void
Ama.CRDT.Models.ICrdtTimestamp
Ama.CRDT.Models.LockInfo
Ama.CRDT.Models.LockInfo.<Clone>$() -> Ama.CRDT.Models.LockInfo!
Ama.CRDT.Models.LockInfo.Deconstruct(out string! LockHolderId, out Ama.CRDT.Models.ICrdtTimestamp! Timestamp) -> void
Ama.CRDT.Models.LockInfo.Equals(Ama.CRDT.Models.LockInfo? other) -> bool
Ama.CRDT.Models.LockInfo.LockHolderId.get -> string!
Ama.CRDT.Models.LockInfo.LockHolderId.init -> void
Ama.CRDT.Models.LockInfo.LockInfo(string! LockHolderId, Ama.CRDT.Models.ICrdtTimestamp! Timestamp) -> void
Ama.CRDT.Models.LockInfo.Timestamp.get -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Models.LockInfo.Timestamp.init -> void
Ama.CRDT.Models.LseqIdentifier
Ama.CRDT.Models.LseqIdentifier.CompareTo(Ama.CRDT.Models.LseqIdentifier other) -> int
Ama.CRDT.Models.LseqIdentifier.Deconstruct(out System.Collections.Immutable.ImmutableList<Ama.CRDT.Models.LseqPathSegment>! Path) -> void
Ama.CRDT.Models.LseqIdentifier.Equals(Ama.CRDT.Models.LseqIdentifier other) -> bool
Ama.CRDT.Models.LseqIdentifier.LseqIdentifier() -> void
Ama.CRDT.Models.LseqIdentifier.LseqIdentifier(System.Collections.Immutable.ImmutableList<Ama.CRDT.Models.LseqPathSegment>! Path) -> void
Ama.CRDT.Models.LseqIdentifier.Path.get -> System.Collections.Immutable.ImmutableList<Ama.CRDT.Models.LseqPathSegment>!
Ama.CRDT.Models.LseqIdentifier.Path.init -> void
Ama.CRDT.Models.LseqItem
Ama.CRDT.Models.LseqItem.Deconstruct(out Ama.CRDT.Models.LseqIdentifier Identifier, out object? Value) -> void
Ama.CRDT.Models.LseqItem.Equals(Ama.CRDT.Models.LseqItem other) -> bool
Ama.CRDT.Models.LseqItem.Identifier.get -> Ama.CRDT.Models.LseqIdentifier
Ama.CRDT.Models.LseqItem.Identifier.init -> void
Ama.CRDT.Models.LseqItem.LseqItem() -> void
Ama.CRDT.Models.LseqItem.LseqItem(Ama.CRDT.Models.LseqIdentifier Identifier, object? Value) -> void
Ama.CRDT.Models.LseqItem.Value.get -> object?
Ama.CRDT.Models.LseqItem.Value.init -> void
Ama.CRDT.Models.LseqPathSegment
Ama.CRDT.Models.LseqPathSegment.Deconstruct(out int Position, out string! ReplicaId) -> void
Ama.CRDT.Models.LseqPathSegment.Equals(Ama.CRDT.Models.LseqPathSegment other) -> bool
Ama.CRDT.Models.LseqPathSegment.LseqPathSegment() -> void
Ama.CRDT.Models.LseqPathSegment.LseqPathSegment(int Position, string! ReplicaId) -> void
Ama.CRDT.Models.LseqPathSegment.Position.get -> int
Ama.CRDT.Models.LseqPathSegment.Position.init -> void
Ama.CRDT.Models.LseqPathSegment.ReplicaId.get -> string!
Ama.CRDT.Models.LseqPathSegment.ReplicaId.init -> void
Ama.CRDT.Models.LwwSetState
Ama.CRDT.Models.LwwSetState.<Clone>$() -> Ama.CRDT.Models.LwwSetState!
Ama.CRDT.Models.LwwSetState.Adds.get -> System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.ICrdtTimestamp!>!
Ama.CRDT.Models.LwwSetState.Adds.init -> void
Ama.CRDT.Models.LwwSetState.Deconstruct(out System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.ICrdtTimestamp!>! Adds, out System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.ICrdtTimestamp!>! Removes) -> void
Ama.CRDT.Models.LwwSetState.Equals(Ama.CRDT.Models.LwwSetState? other) -> bool
Ama.CRDT.Models.LwwSetState.LwwSetState(System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.ICrdtTimestamp!>! Adds, System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.ICrdtTimestamp!>! Removes) -> void
Ama.CRDT.Models.LwwSetState.Removes.get -> System.Collections.Generic.IDictionary<object!, Ama.CRDT.Models.ICrdtTimestamp!>!
Ama.CRDT.Models.LwwSetState.Removes.init -> void
Ama.CRDT.Models.OperationType
Ama.CRDT.Models.OperationType.Increment = 2 -> Ama.CRDT.Models.OperationType
Ama.CRDT.Models.OperationType.Move = 3 -> Ama.CRDT.Models.OperationType
Ama.CRDT.Models.OperationType.Remove = 1 -> Ama.CRDT.Models.OperationType
Ama.CRDT.Models.OperationType.Upsert = 0 -> Ama.CRDT.Models.OperationType
Ama.CRDT.Models.OrMapAddItem
Ama.CRDT.Models.OrMapAddItem.Deconstruct(out object! Key, out object? Value, out System.Guid Tag) -> void
Ama.CRDT.Models.OrMapAddItem.Equals(Ama.CRDT.Models.OrMapAddItem other) -> bool
Ama.CRDT.Models.OrMapAddItem.Key.get -> object!
Ama.CRDT.Models.OrMapAddItem.Key.init -> void
Ama.CRDT.Models.OrMapAddItem.OrMapAddItem() -> void
Ama.CRDT.Models.OrMapAddItem.OrMapAddItem(object! Key, object? Value, System.Guid Tag) -> void
Ama.CRDT.Models.OrMapAddItem.Tag.get -> System.Guid
Ama.CRDT.Models.OrMapAddItem.Tag.init -> void
Ama.CRDT.Models.OrMapAddItem.Value.get -> object?
Ama.CRDT.Models.OrMapAddItem.Value.init -> void
Ama.CRDT.Models.OrMapRemoveItem
Ama.CRDT.Models.OrMapRemoveItem.Deconstruct(out object! Key, out System.Collections.Generic.ISet<System.Guid>! Tags) -> void
Ama.CRDT.Models.OrMapRemoveItem.Equals(Ama.CRDT.Models.OrMapRemoveItem other) -> bool
Ama.CRDT.Models.OrMapRemoveItem.Key.get -> object!
Ama.CRDT.Models.OrMapRemoveItem.Key.init -> void
Ama.CRDT.Models.OrMapRemoveItem.OrMapRemoveItem() -> void
Ama.CRDT.Models.OrMapRemoveItem.OrMapRemoveItem(object! Key, System.Collections.Generic.ISet<System.Guid>! Tags) -> void
Ama.CRDT.Models.OrMapRemoveItem.Tags.get -> System.Collections.Generic.ISet<System.Guid>!
Ama.CRDT.Models.OrMapRemoveItem.Tags.init -> void
Ama.CRDT.Models.OrSetAddItem
Ama.CRDT.Models.OrSetAddItem.Deconstruct(out object! Value, out System.Guid Tag) -> void
Ama.CRDT.Models.OrSetAddItem.Equals(Ama.CRDT.Models.OrSetAddItem other) -> bool
Ama.CRDT.Models.OrSetAddItem.OrSetAddItem() -> void
Ama.CRDT.Models.OrSetAddItem.OrSetAddItem(object! Value, System.Guid Tag) -> void
Ama.CRDT.Models.OrSetAddItem.Tag.get -> System.Guid
Ama.CRDT.Models.OrSetAddItem.Tag.init -> void
Ama.CRDT.Models.OrSetAddItem.Value.get -> object!
Ama.CRDT.Models.OrSetAddItem.Value.init -> void
Ama.CRDT.Models.OrSetRemoveItem
Ama.CRDT.Models.OrSetRemoveItem.Deconstruct(out object! Value, out System.Collections.Generic.ISet<System.Guid>! Tags) -> void
Ama.CRDT.Models.OrSetRemoveItem.Equals(Ama.CRDT.Models.OrSetRemoveItem other) -> bool
Ama.CRDT.Models.OrSetRemoveItem.OrSetRemoveItem() -> void
Ama.CRDT.Models.OrSetRemoveItem.OrSetRemoveItem(object! Value, System.Collections.Generic.ISet<System.Guid>! Tags) -> void
Ama.CRDT.Models.OrSetRemoveItem.Tags.get -> System.Collections.Generic.ISet<System.Guid>!
Ama.CRDT.Models.OrSetRemoveItem.Tags.init -> void
Ama.CRDT.Models.OrSetRemoveItem.Value.get -> object!
Ama.CRDT.Models.OrSetRemoveItem.Value.init -> void
Ama.CRDT.Models.OrSetState
Ama.CRDT.Models.OrSetState.<Clone>$() -> Ama.CRDT.Models.OrSetState!
Ama.CRDT.Models.OrSetState.Adds.get -> System.Collections.Generic.IDictionary<object!, System.Collections.Generic.ISet<System.Guid>!>!
Ama.CRDT.Models.OrSetState.Adds.init -> void
Ama.CRDT.Models.OrSetState.Deconstruct(out System.Collections.Generic.IDictionary<object!, System.Collections.Generic.ISet<System.Guid>!>! Adds, out System.Collections.Generic.IDictionary<object!, System.Collections.Generic.ISet<System.Guid>!>! Removes) -> void
Ama.CRDT.Models.OrSetState.Equals(Ama.CRDT.Models.OrSetState? other) -> bool
Ama.CRDT.Models.OrSetState.OrSetState(System.Collections.Generic.IDictionary<object!, System.Collections.Generic.ISet<System.Guid>!>! Adds, System.Collections.Generic.IDictionary<object!, System.Collections.Generic.ISet<System.Guid>!>! Removes) -> void
Ama.CRDT.Models.OrSetState.Removes.get -> System.Collections.Generic.IDictionary<object!, System.Collections.Generic.ISet<System.Guid>!>!
Ama.CRDT.Models.OrSetState.Removes.init -> void
Ama.CRDT.Models.PnCounterState
Ama.CRDT.Models.PnCounterState.<Clone>$() -> Ama.CRDT.Models.PnCounterState!
Ama.CRDT.Models.PnCounterState.Deconstruct(out decimal P, out decimal N) -> void
Ama.CRDT.Models.PnCounterState.Equals(Ama.CRDT.Models.PnCounterState? other) -> bool
Ama.CRDT.Models.PnCounterState.N.get -> decimal
Ama.CRDT.Models.PnCounterState.N.init -> void
Ama.CRDT.Models.PnCounterState.P.get -> decimal
Ama.CRDT.Models.PnCounterState.P.init -> void
Ama.CRDT.Models.PnCounterState.PnCounterState(decimal P, decimal N) -> void
Ama.CRDT.Models.PositionalIdentifier
Ama.CRDT.Models.PositionalIdentifier.CompareTo(Ama.CRDT.Models.PositionalIdentifier other) -> int
Ama.CRDT.Models.PositionalIdentifier.Deconstruct(out string! Position, out System.Guid OperationId) -> void
Ama.CRDT.Models.PositionalIdentifier.Equals(Ama.CRDT.Models.PositionalIdentifier other) -> bool
Ama.CRDT.Models.PositionalIdentifier.OperationId.get -> System.Guid
Ama.CRDT.Models.PositionalIdentifier.OperationId.init -> void
Ama.CRDT.Models.PositionalIdentifier.Position.get -> string!
Ama.CRDT.Models.PositionalIdentifier.Position.init -> void
Ama.CRDT.Models.PositionalIdentifier.PositionalIdentifier() -> void
Ama.CRDT.Models.PositionalIdentifier.PositionalIdentifier(string! Position, System.Guid OperationId) -> void
Ama.CRDT.Models.PositionalItem
Ama.CRDT.Models.PositionalItem.Deconstruct(out string! Position, out object? Value) -> void
Ama.CRDT.Models.PositionalItem.Equals(Ama.CRDT.Models.PositionalItem other) -> bool
Ama.CRDT.Models.PositionalItem.Position.get -> string!
Ama.CRDT.Models.PositionalItem.Position.init -> void
Ama.CRDT.Models.PositionalItem.PositionalItem() -> void
Ama.CRDT.Models.PositionalItem.PositionalItem(string! Position, object? Value) -> void
Ama.CRDT.Models.PositionalItem.Value.get -> object?
Ama.CRDT.Models.PositionalItem.Value.init -> void
Ama.CRDT.Models.SequentialTimestamp
Ama.CRDT.Models.SequentialTimestamp.CompareTo(Ama.CRDT.Models.ICrdtTimestamp? other) -> int
Ama.CRDT.Models.SequentialTimestamp.Deconstruct(out long Value) -> void
Ama.CRDT.Models.SequentialTimestamp.Equals(Ama.CRDT.Models.SequentialTimestamp other) -> bool
Ama.CRDT.Models.SequentialTimestamp.SequentialTimestamp() -> void
Ama.CRDT.Models.SequentialTimestamp.SequentialTimestamp(long Value) -> void
Ama.CRDT.Models.SequentialTimestamp.Value.get -> long
Ama.CRDT.Models.SequentialTimestamp.Value.init -> void
Ama.CRDT.Models.Serialization.Converters.ObjectKeyDictionaryJsonConverter
Ama.CRDT.Models.Serialization.Converters.ObjectKeyDictionaryJsonConverter.ObjectKeyDictionaryJsonConverter() -> void
Ama.CRDT.Models.Serialization.Converters.PolymorphicObjectJsonConverter
Ama.CRDT.Models.Serialization.Converters.PolymorphicObjectJsonConverter.PolymorphicObjectJsonConverter() -> void
Ama.CRDT.Models.Serialization.CrdtJsonContext
Ama.CRDT.Models.Serialization.CrdtJsonTypeInfoResolver
Ama.CRDT.Models.Serialization.CrdtMetadataJsonResolver
Ama.CRDT.Models.Serialization.CrdtTimestampJsonConverter
Ama.CRDT.Models.Serialization.CrdtTimestampJsonConverter.CrdtTimestampJsonConverter() -> void
Ama.CRDT.Models.TreeAddNodePayload
Ama.CRDT.Models.TreeAddNodePayload.Deconstruct(out object! NodeId, out object? Value, out object? ParentId, out System.Guid Tag) -> void
Ama.CRDT.Models.TreeAddNodePayload.Equals(Ama.CRDT.Models.TreeAddNodePayload other) -> bool
Ama.CRDT.Models.TreeAddNodePayload.NodeId.get -> object!
Ama.CRDT.Models.TreeAddNodePayload.NodeId.init -> void
Ama.CRDT.Models.TreeAddNodePayload.ParentId.get -> object?
Ama.CRDT.Models.TreeAddNodePayload.ParentId.init -> void
Ama.CRDT.Models.TreeAddNodePayload.Tag.get -> System.Guid
Ama.CRDT.Models.TreeAddNodePayload.Tag.init -> void
Ama.CRDT.Models.TreeAddNodePayload.TreeAddNodePayload() -> void
Ama.CRDT.Models.TreeAddNodePayload.TreeAddNodePayload(object! NodeId, object? Value, object? ParentId, System.Guid Tag) -> void
Ama.CRDT.Models.TreeAddNodePayload.Value.get -> object?
Ama.CRDT.Models.TreeAddNodePayload.Value.init -> void
Ama.CRDT.Models.TreeMoveNodePayload
Ama.CRDT.Models.TreeMoveNodePayload.Deconstruct(out object! NodeId, out object? NewParentId) -> void
Ama.CRDT.Models.TreeMoveNodePayload.Equals(Ama.CRDT.Models.TreeMoveNodePayload other) -> bool
Ama.CRDT.Models.TreeMoveNodePayload.NewParentId.get -> object?
Ama.CRDT.Models.TreeMoveNodePayload.NewParentId.init -> void
Ama.CRDT.Models.TreeMoveNodePayload.NodeId.get -> object!
Ama.CRDT.Models.TreeMoveNodePayload.NodeId.init -> void
Ama.CRDT.Models.TreeMoveNodePayload.TreeMoveNodePayload() -> void
Ama.CRDT.Models.TreeMoveNodePayload.TreeMoveNodePayload(object! NodeId, object? NewParentId) -> void
Ama.CRDT.Models.TreeNode
Ama.CRDT.Models.TreeNode.<Clone>$() -> Ama.CRDT.Models.TreeNode!
Ama.CRDT.Models.TreeNode.Equals(Ama.CRDT.Models.TreeNode? other) -> bool
Ama.CRDT.Models.TreeNode.Id.get -> object!
Ama.CRDT.Models.TreeNode.Id.init -> void
Ama.CRDT.Models.TreeNode.ParentId.get -> object?
Ama.CRDT.Models.TreeNode.ParentId.set -> void
Ama.CRDT.Models.TreeNode.TreeNode() -> void
Ama.CRDT.Models.TreeNode.Value.get -> object?
Ama.CRDT.Models.TreeNode.Value.set -> void
Ama.CRDT.Models.TreeRemoveNodePayload
Ama.CRDT.Models.TreeRemoveNodePayload.Deconstruct(out object! NodeId, out System.Collections.Generic.ISet<System.Guid>! Tags) -> void
Ama.CRDT.Models.TreeRemoveNodePayload.Equals(Ama.CRDT.Models.TreeRemoveNodePayload other) -> bool
Ama.CRDT.Models.TreeRemoveNodePayload.NodeId.get -> object!
Ama.CRDT.Models.TreeRemoveNodePayload.NodeId.init -> void
Ama.CRDT.Models.TreeRemoveNodePayload.Tags.get -> System.Collections.Generic.ISet<System.Guid>!
Ama.CRDT.Models.TreeRemoveNodePayload.Tags.init -> void
Ama.CRDT.Models.TreeRemoveNodePayload.TreeRemoveNodePayload() -> void
Ama.CRDT.Models.TreeRemoveNodePayload.TreeRemoveNodePayload(object! NodeId, System.Collections.Generic.ISet<System.Guid>! Tags) -> void
Ama.CRDT.Models.TwoPhaseGraphState
Ama.CRDT.Models.TwoPhaseGraphState.<Clone>$() -> Ama.CRDT.Models.TwoPhaseGraphState!
Ama.CRDT.Models.TwoPhaseGraphState.Deconstruct(out System.Collections.Generic.ISet<object!>! VertexAdds, out System.Collections.Generic.ISet<object!>! VertexTombstones, out System.Collections.Generic.ISet<object!>! EdgeAdds, out System.Collections.Generic.ISet<object!>! EdgeTombstones) -> void
Ama.CRDT.Models.TwoPhaseGraphState.EdgeAdds.get -> System.Collections.Generic.ISet<object!>!
Ama.CRDT.Models.TwoPhaseGraphState.EdgeAdds.init -> void
Ama.CRDT.Models.TwoPhaseGraphState.EdgeTombstones.get -> System.Collections.Generic.ISet<object!>!
Ama.CRDT.Models.TwoPhaseGraphState.EdgeTombstones.init -> void
Ama.CRDT.Models.TwoPhaseGraphState.Equals(Ama.CRDT.Models.TwoPhaseGraphState? other) -> bool
Ama.CRDT.Models.TwoPhaseGraphState.TwoPhaseGraphState(System.Collections.Generic.ISet<object!>! VertexAdds, System.Collections.Generic.ISet<object!>! VertexTombstones, System.Collections.Generic.ISet<object!>! EdgeAdds, System.Collections.Generic.ISet<object!>! EdgeTombstones) -> void
Ama.CRDT.Models.TwoPhaseGraphState.VertexAdds.get -> System.Collections.Generic.ISet<object!>!
Ama.CRDT.Models.TwoPhaseGraphState.VertexAdds.init -> void
Ama.CRDT.Models.TwoPhaseGraphState.VertexTombstones.get -> System.Collections.Generic.ISet<object!>!
Ama.CRDT.Models.TwoPhaseGraphState.VertexTombstones.init -> void
Ama.CRDT.Models.TwoPhaseSetState
Ama.CRDT.Models.TwoPhaseSetState.<Clone>$() -> Ama.CRDT.Models.TwoPhaseSetState!
Ama.CRDT.Models.TwoPhaseSetState.Adds.get -> System.Collections.Generic.ISet<object!>!
Ama.CRDT.Models.TwoPhaseSetState.Adds.init -> void
Ama.CRDT.Models.TwoPhaseSetState.Deconstruct(out System.Collections.Generic.ISet<object!>! Adds, out System.Collections.Generic.ISet<object!>! Tomstones) -> void
Ama.CRDT.Models.TwoPhaseSetState.Equals(Ama.CRDT.Models.TwoPhaseSetState? other) -> bool
Ama.CRDT.Models.TwoPhaseSetState.Tomstones.get -> System.Collections.Generic.ISet<object!>!
Ama.CRDT.Models.TwoPhaseSetState.Tomstones.init -> void
Ama.CRDT.Models.TwoPhaseSetState.TwoPhaseSetState(System.Collections.Generic.ISet<object!>! Adds, System.Collections.Generic.ISet<object!>! Tomstones) -> void
Ama.CRDT.Models.VotePayload
Ama.CRDT.Models.VotePayload.Deconstruct(out object! Voter, out object! Option) -> void
Ama.CRDT.Models.VotePayload.Equals(Ama.CRDT.Models.VotePayload other) -> bool
Ama.CRDT.Models.VotePayload.Option.get -> object!
Ama.CRDT.Models.VotePayload.Option.init -> void
Ama.CRDT.Models.VotePayload.VotePayload() -> void
Ama.CRDT.Models.VotePayload.VotePayload(object! Voter, object! Option) -> void
Ama.CRDT.Models.VotePayload.Voter.get -> object!
Ama.CRDT.Models.VotePayload.Voter.init -> void
Ama.CRDT.Services.CrdtApplicator
Ama.CRDT.Services.CrdtApplicator.ApplyPatch<T>(Ama.CRDT.Models.CrdtDocument<T!> document, Ama.CRDT.Models.CrdtPatch patch) -> T!
Ama.CRDT.Services.CrdtApplicator.CrdtApplicator(Ama.CRDT.Services.Providers.ICrdtStrategyProvider! strategyProvider, Ama.CRDT.Services.Providers.ICrdtTimestampProvider! timestampProvider, Ama.CRDT.Services.ICrdtMetadataManager! metadataManager) -> void
Ama.CRDT.Services.CrdtMetadataManager
Ama.CRDT.Services.CrdtMetadataManager.AdvanceVersionVector(Ama.CRDT.Models.CrdtMetadata! metadata, Ama.CRDT.Models.CrdtOperation operation) -> void
Ama.CRDT.Services.CrdtMetadataManager.AdvanceVersionVector(Ama.CRDT.Models.CrdtMetadata! metadata, string! replicaId, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.CrdtMetadataManager.Clone(Ama.CRDT.Models.CrdtMetadata! metadata) -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.CrdtMetadataManager.CrdtMetadataManager(Ama.CRDT.Services.Providers.ICrdtStrategyProvider! strategyProvider, Ama.CRDT.Services.Providers.ICrdtTimestampProvider! timestampProvider, Ama.CRDT.Services.Providers.IElementComparerProvider! elementComparerProvider) -> void
Ama.CRDT.Services.CrdtMetadataManager.ExclusiveLock(Ama.CRDT.Models.CrdtMetadata! metadata, string! path, string! lockHolderId, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.CrdtMetadataManager.Initialize<T>(Ama.CRDT.Models.CrdtDocument<T!> document) -> void
Ama.CRDT.Services.CrdtMetadataManager.Initialize<T>(Ama.CRDT.Models.CrdtDocument<T!> document, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.CrdtMetadataManager.Initialize<T>(T! document) -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.CrdtMetadataManager.Initialize<T>(T! document, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.CrdtMetadataManager.PruneLwwTombstones(Ama.CRDT.Models.CrdtMetadata! metadata, Ama.CRDT.Models.ICrdtTimestamp! threshold) -> void
Ama.CRDT.Services.CrdtMetadataManager.ReleaseLock(Ama.CRDT.Models.CrdtMetadata! metadata, string! path, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.CrdtMetadataManager.Reset<T>(Ama.CRDT.Models.CrdtDocument<T!> document) -> void
Ama.CRDT.Services.CrdtMetadataManager.Reset<T>(Ama.CRDT.Models.CrdtDocument<T!> document, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.CrdtPatcher
Ama.CRDT.Services.CrdtPatcher.CrdtPatcher(Ama.CRDT.Services.Providers.ICrdtStrategyProvider! strategyProvider, Ama.CRDT.Services.Providers.ICrdtTimestampProvider! timestampProvider) -> void
Ama.CRDT.Services.CrdtPatcher.DifferentiateObject(Ama.CRDT.Services.DifferentiateObjectContext! context) -> void
Ama.CRDT.Services.CrdtPatcher.GeneratePatch<T>(Ama.CRDT.Models.CrdtDocument<T!> from, T! changed) -> Ama.CRDT.Models.CrdtPatch
Ama.CRDT.Services.CrdtPatcher.GeneratePatch<T>(Ama.CRDT.Models.CrdtDocument<T!> from, T! changed, Ama.CRDT.Models.ICrdtTimestamp! changeTimestamp) -> Ama.CRDT.Models.CrdtPatch
Ama.CRDT.Services.DifferentiateObjectContext
Ama.CRDT.Services.DifferentiateObjectContext.<Clone>$() -> Ama.CRDT.Services.DifferentiateObjectContext!
Ama.CRDT.Services.DifferentiateObjectContext.ChangeTimestamp.get -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.DifferentiateObjectContext.ChangeTimestamp.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.Deconstruct(out string! Path, out System.Type! Type, out object? FromObj, out object? ToObj, out object? FromRoot, out object? ToRoot, out Ama.CRDT.Models.CrdtMetadata! FromMeta, out System.Collections.Generic.List<Ama.CRDT.Models.CrdtOperation>! Operations, out Ama.CRDT.Models.ICrdtTimestamp! ChangeTimestamp) -> void
Ama.CRDT.Services.DifferentiateObjectContext.DifferentiateObjectContext(string! Path, System.Type! Type, object? FromObj, object? ToObj, object? FromRoot, object? ToRoot, Ama.CRDT.Models.CrdtMetadata! FromMeta, System.Collections.Generic.List<Ama.CRDT.Models.CrdtOperation>! Operations, Ama.CRDT.Models.ICrdtTimestamp! ChangeTimestamp) -> void
Ama.CRDT.Services.DifferentiateObjectContext.Equals(Ama.CRDT.Services.DifferentiateObjectContext? other) -> bool
Ama.CRDT.Services.DifferentiateObjectContext.FromMeta.get -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.DifferentiateObjectContext.FromMeta.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.FromObj.get -> object?
Ama.CRDT.Services.DifferentiateObjectContext.FromObj.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.FromRoot.get -> object?
Ama.CRDT.Services.DifferentiateObjectContext.FromRoot.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.Operations.get -> System.Collections.Generic.List<Ama.CRDT.Models.CrdtOperation>!
Ama.CRDT.Services.DifferentiateObjectContext.Operations.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.Path.get -> string!
Ama.CRDT.Services.DifferentiateObjectContext.Path.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.ToObj.get -> object?
Ama.CRDT.Services.DifferentiateObjectContext.ToObj.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.ToRoot.get -> object?
Ama.CRDT.Services.DifferentiateObjectContext.ToRoot.init -> void
Ama.CRDT.Services.DifferentiateObjectContext.Type.get -> System.Type!
Ama.CRDT.Services.DifferentiateObjectContext.Type.init -> void
Ama.CRDT.Services.ICrdtApplicator
Ama.CRDT.Services.ICrdtApplicator.ApplyPatch<T>(Ama.CRDT.Models.CrdtDocument<T!> document, Ama.CRDT.Models.CrdtPatch patch) -> T!
Ama.CRDT.Services.ICrdtMetadataManager
Ama.CRDT.Services.ICrdtMetadataManager.AdvanceVersionVector(Ama.CRDT.Models.CrdtMetadata! metadata, Ama.CRDT.Models.CrdtOperation operation) -> void
Ama.CRDT.Services.ICrdtMetadataManager.AdvanceVersionVector(Ama.CRDT.Models.CrdtMetadata! metadata, string! replicaId, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.ICrdtMetadataManager.Clone(Ama.CRDT.Models.CrdtMetadata! metadata) -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.ICrdtMetadataManager.ExclusiveLock(Ama.CRDT.Models.CrdtMetadata! metadata, string! path, string! lockHolderId, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.ICrdtMetadataManager.Initialize<T>(Ama.CRDT.Models.CrdtDocument<T!> document) -> void
Ama.CRDT.Services.ICrdtMetadataManager.Initialize<T>(Ama.CRDT.Models.CrdtDocument<T!> document, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.ICrdtMetadataManager.Initialize<T>(T! document) -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.ICrdtMetadataManager.Initialize<T>(T! document, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.ICrdtMetadataManager.PruneLwwTombstones(Ama.CRDT.Models.CrdtMetadata! metadata, Ama.CRDT.Models.ICrdtTimestamp! threshold) -> void
Ama.CRDT.Services.ICrdtMetadataManager.ReleaseLock(Ama.CRDT.Models.CrdtMetadata! metadata, string! path, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.ICrdtMetadataManager.Reset<T>(Ama.CRDT.Models.CrdtDocument<T!> document) -> void
Ama.CRDT.Services.ICrdtMetadataManager.Reset<T>(Ama.CRDT.Models.CrdtDocument<T!> document, Ama.CRDT.Models.ICrdtTimestamp! timestamp) -> void
Ama.CRDT.Services.ICrdtPatcher
Ama.CRDT.Services.ICrdtPatcher.DifferentiateObject(Ama.CRDT.Services.DifferentiateObjectContext! context) -> void
Ama.CRDT.Services.ICrdtPatcher.GeneratePatch<T>(Ama.CRDT.Models.CrdtDocument<T!> from, T! changed) -> Ama.CRDT.Models.CrdtPatch
Ama.CRDT.Services.ICrdtPatcher.GeneratePatch<T>(Ama.CRDT.Models.CrdtDocument<T!> from, T! changed, Ama.CRDT.Models.ICrdtTimestamp! changeTimestamp) -> Ama.CRDT.Models.CrdtPatch
Ama.CRDT.Services.ICrdtScopeFactory
Ama.CRDT.Services.ICrdtScopeFactory.CreateScope(string! replicaId) -> Microsoft.Extensions.DependencyInjection.IServiceScope!
Ama.CRDT.Services.Providers.EpochTimestampProvider
Ama.CRDT.Services.Providers.EpochTimestampProvider.Create(long value) -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.EpochTimestampProvider.EpochTimestampProvider() -> void
Ama.CRDT.Services.Providers.EpochTimestampProvider.Init() -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.EpochTimestampProvider.IsContinuous.get -> bool
Ama.CRDT.Services.Providers.EpochTimestampProvider.IterateBetween(Ama.CRDT.Models.ICrdtTimestamp! start, Ama.CRDT.Models.ICrdtTimestamp! end) -> System.Collections.Generic.IEnumerable<Ama.CRDT.Models.ICrdtTimestamp!>!
Ama.CRDT.Services.Providers.EpochTimestampProvider.Now() -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.ICrdtStrategyProvider
Ama.CRDT.Services.Providers.ICrdtStrategyProvider.GetStrategy(Ama.CRDT.Models.CrdtOperation operation, object! root) -> Ama.CRDT.Services.Strategies.ICrdtStrategy!
Ama.CRDT.Services.Providers.ICrdtStrategyProvider.GetStrategy(System.Reflection.PropertyInfo! propertyInfo) -> Ama.CRDT.Services.Strategies.ICrdtStrategy!
Ama.CRDT.Services.Providers.ICrdtTimestampProvider
Ama.CRDT.Services.Providers.ICrdtTimestampProvider.Create(long value) -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.ICrdtTimestampProvider.Init() -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.ICrdtTimestampProvider.IsContinuous.get -> bool
Ama.CRDT.Services.Providers.ICrdtTimestampProvider.IterateBetween(Ama.CRDT.Models.ICrdtTimestamp! start, Ama.CRDT.Models.ICrdtTimestamp! end) -> System.Collections.Generic.IEnumerable<Ama.CRDT.Models.ICrdtTimestamp!>!
Ama.CRDT.Services.Providers.ICrdtTimestampProvider.Now() -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.IElementComparer
Ama.CRDT.Services.Providers.IElementComparer.CanCompare(System.Type! type) -> bool
Ama.CRDT.Services.Providers.IElementComparerProvider
Ama.CRDT.Services.Providers.IElementComparerProvider.GetComparer(System.Type! elementType) -> System.Collections.Generic.IEqualityComparer<object!>!
Ama.CRDT.Services.Providers.SequentialTimestampProvider
Ama.CRDT.Services.Providers.SequentialTimestampProvider.Create(long value) -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.SequentialTimestampProvider.Init() -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.SequentialTimestampProvider.IsContinuous.get -> bool
Ama.CRDT.Services.Providers.SequentialTimestampProvider.IterateBetween(Ama.CRDT.Models.ICrdtTimestamp! start, Ama.CRDT.Models.ICrdtTimestamp! end) -> System.Collections.Generic.IEnumerable<Ama.CRDT.Models.ICrdtTimestamp!>!
Ama.CRDT.Services.Providers.SequentialTimestampProvider.Now() -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Providers.SequentialTimestampProvider.SequentialTimestampProvider() -> void
Ama.CRDT.Services.ReplicaContext
Ama.CRDT.Services.ReplicaContext.ReplicaContext() -> void
Ama.CRDT.Services.ReplicaContext.ReplicaId.get -> string!
Ama.CRDT.Services.ReplicaContext.ReplicaId.set -> void
Ama.CRDT.Services.Strategies.ApplyOperationContext
Ama.CRDT.Services.Strategies.ApplyOperationContext.<Clone>$() -> Ama.CRDT.Services.Strategies.ApplyOperationContext!
Ama.CRDT.Services.Strategies.ApplyOperationContext.ApplyOperationContext(object! Root, Ama.CRDT.Models.CrdtMetadata! Metadata, Ama.CRDT.Models.CrdtOperation Operation) -> void
Ama.CRDT.Services.Strategies.ApplyOperationContext.Deconstruct(out object! Root, out Ama.CRDT.Models.CrdtMetadata! Metadata, out Ama.CRDT.Models.CrdtOperation Operation) -> void
Ama.CRDT.Services.Strategies.ApplyOperationContext.Equals(Ama.CRDT.Services.Strategies.ApplyOperationContext? other) -> bool
Ama.CRDT.Services.Strategies.ApplyOperationContext.Metadata.get -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.Strategies.ApplyOperationContext.Metadata.init -> void
Ama.CRDT.Services.Strategies.ApplyOperationContext.Operation.get -> Ama.CRDT.Models.CrdtOperation
Ama.CRDT.Services.Strategies.ApplyOperationContext.Operation.init -> void
Ama.CRDT.Services.Strategies.ApplyOperationContext.Root.get -> object!
Ama.CRDT.Services.Strategies.ApplyOperationContext.Root.init -> void
Ama.CRDT.Services.Strategies.ArrayLcsStrategy
Ama.CRDT.Services.Strategies.ArrayLcsStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.ArrayLcsStrategy.ArrayLcsStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.ArrayLcsStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.AverageRegisterStrategy
Ama.CRDT.Services.Strategies.AverageRegisterStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.AverageRegisterStrategy.AverageRegisterStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.AverageRegisterStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.BoundedCounterStrategy
Ama.CRDT.Services.Strategies.BoundedCounterStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.BoundedCounterStrategy.BoundedCounterStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.BoundedCounterStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.CounterMapStrategy
Ama.CRDT.Services.Strategies.CounterMapStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.CounterMapStrategy.CounterMapStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.CounterMapStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.CounterStrategy
Ama.CRDT.Services.Strategies.CounterStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.CounterStrategy.CounterStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.CounterStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.ExclusiveLockStrategy
Ama.CRDT.Services.Strategies.ExclusiveLockStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.ExclusiveLockStrategy.ExclusiveLockStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.ExclusiveLockStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.FixedSizeArrayStrategy
Ama.CRDT.Services.Strategies.FixedSizeArrayStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.FixedSizeArrayStrategy.FixedSizeArrayStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.FixedSizeArrayStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.GCounterStrategy
Ama.CRDT.Services.Strategies.GCounterStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.GCounterStrategy.GCounterStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.GCounterStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext
Ama.CRDT.Services.Strategies.GeneratePatchContext.<Clone>$() -> Ama.CRDT.Services.Strategies.GeneratePatchContext!
Ama.CRDT.Services.Strategies.GeneratePatchContext.ChangeTimestamp.get -> Ama.CRDT.Models.ICrdtTimestamp!
Ama.CRDT.Services.Strategies.GeneratePatchContext.ChangeTimestamp.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.Deconstruct(out Ama.CRDT.Services.ICrdtPatcher! Patcher, out System.Collections.Generic.List<Ama.CRDT.Models.CrdtOperation>! Operations, out string! Path, out System.Reflection.PropertyInfo! Property, out object? OriginalValue, out object? ModifiedValue, out object? OriginalRoot, out object? ModifiedRoot, out Ama.CRDT.Models.CrdtMetadata! OriginalMeta, out Ama.CRDT.Models.ICrdtTimestamp! ChangeTimestamp) -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.Equals(Ama.CRDT.Services.Strategies.GeneratePatchContext? other) -> bool
Ama.CRDT.Services.Strategies.GeneratePatchContext.GeneratePatchContext(Ama.CRDT.Services.ICrdtPatcher! Patcher, System.Collections.Generic.List<Ama.CRDT.Models.CrdtOperation>! Operations, string! Path, System.Reflection.PropertyInfo! Property, object? OriginalValue, object? ModifiedValue, object? OriginalRoot, object? ModifiedRoot, Ama.CRDT.Models.CrdtMetadata! OriginalMeta, Ama.CRDT.Models.ICrdtTimestamp! ChangeTimestamp) -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.ModifiedRoot.get -> object?
Ama.CRDT.Services.Strategies.GeneratePatchContext.ModifiedRoot.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.ModifiedValue.get -> object?
Ama.CRDT.Services.Strategies.GeneratePatchContext.ModifiedValue.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.Operations.get -> System.Collections.Generic.List<Ama.CRDT.Models.CrdtOperation>!
Ama.CRDT.Services.Strategies.GeneratePatchContext.Operations.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.OriginalMeta.get -> Ama.CRDT.Models.CrdtMetadata!
Ama.CRDT.Services.Strategies.GeneratePatchContext.OriginalMeta.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.OriginalRoot.get -> object?
Ama.CRDT.Services.Strategies.GeneratePatchContext.OriginalRoot.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.OriginalValue.get -> object?
Ama.CRDT.Services.Strategies.GeneratePatchContext.OriginalValue.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.Patcher.get -> Ama.CRDT.Services.ICrdtPatcher!
Ama.CRDT.Services.Strategies.GeneratePatchContext.Patcher.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.Path.get -> string!
Ama.CRDT.Services.Strategies.GeneratePatchContext.Path.init -> void
Ama.CRDT.Services.Strategies.GeneratePatchContext.Property.get -> System.Reflection.PropertyInfo!
Ama.CRDT.Services.Strategies.GeneratePatchContext.Property.init -> void
Ama.CRDT.Services.Strategies.GraphStrategy
Ama.CRDT.Services.Strategies.GraphStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.GraphStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.GraphStrategy.GraphStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.GSetStrategy
Ama.CRDT.Services.Strategies.GSetStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.GSetStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.GSetStrategy.GSetStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.ICrdtStrategy
Ama.CRDT.Services.Strategies.ICrdtStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.ICrdtStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.LseqStrategy
Ama.CRDT.Services.Strategies.LseqStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.LseqStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.LseqStrategy.LseqStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! elementComparerProvider, Ama.CRDT.Services.Providers.ICrdtTimestampProvider! timestampProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.LwwMapStrategy
Ama.CRDT.Services.Strategies.LwwMapStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.LwwMapStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.LwwMapStrategy.LwwMapStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.LwwSetStrategy
Ama.CRDT.Services.Strategies.LwwSetStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.LwwSetStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.LwwSetStrategy.LwwSetStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.Providers.ICrdtTimestampProvider! timestampProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.LwwStrategy
Ama.CRDT.Services.Strategies.LwwStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.LwwStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.LwwStrategy.LwwStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.MaxWinsMapStrategy
Ama.CRDT.Services.Strategies.MaxWinsMapStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.MaxWinsMapStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.MaxWinsMapStrategy.MaxWinsMapStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.MaxWinsStrategy
Ama.CRDT.Services.Strategies.MaxWinsStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.MaxWinsStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.MaxWinsStrategy.MaxWinsStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.MinWinsMapStrategy
Ama.CRDT.Services.Strategies.MinWinsMapStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.MinWinsMapStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.MinWinsMapStrategy.MinWinsMapStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.MinWinsStrategy
Ama.CRDT.Services.Strategies.MinWinsStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.MinWinsStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.MinWinsStrategy.MinWinsStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.OrMapStrategy
Ama.CRDT.Services.Strategies.OrMapStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.OrMapStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.OrMapStrategy.OrMapStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.OrSetStrategy
Ama.CRDT.Services.Strategies.OrSetStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.OrSetStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.OrSetStrategy.OrSetStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.PriorityQueueStrategy
Ama.CRDT.Services.Strategies.PriorityQueueStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.PriorityQueueStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.PriorityQueueStrategy.PriorityQueueStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.ReplicatedTreeStrategy
Ama.CRDT.Services.Strategies.ReplicatedTreeStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.ReplicatedTreeStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.ReplicatedTreeStrategy.ReplicatedTreeStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy
Ama.CRDT.Services.Strategies.SortedSetStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.Deconstruct(out Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType Type, out int OldIndex, out int NewIndex) -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.Equals(Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry other) -> bool
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.LcsDiffEntry() -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.LcsDiffEntry(Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType Type, int OldIndex, int NewIndex) -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.NewIndex.get -> int
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.NewIndex.init -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.OldIndex.get -> int
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.OldIndex.init -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.Type.get -> Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.Type.init -> void
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType.Add = 1 -> Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType.Match = 0 -> Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType
Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType.Remove = 2 -> Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntryType
Ama.CRDT.Services.Strategies.SortedSetStrategy.SortedSetStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.StateMachineStrategy
Ama.CRDT.Services.Strategies.StateMachineStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.StateMachineStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.StateMachineStrategy.StateMachineStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext, System.IServiceProvider! serviceProvider) -> void
Ama.CRDT.Services.Strategies.TwoPhaseGraphStrategy
Ama.CRDT.Services.Strategies.TwoPhaseGraphStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.TwoPhaseGraphStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.TwoPhaseGraphStrategy.TwoPhaseGraphStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.TwoPhaseSetStrategy
Ama.CRDT.Services.Strategies.TwoPhaseSetStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.TwoPhaseSetStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.TwoPhaseSetStrategy.TwoPhaseSetStrategy(Ama.CRDT.Services.Providers.IElementComparerProvider! comparerProvider, Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
Ama.CRDT.Services.Strategies.VoteCounterStrategy
Ama.CRDT.Services.Strategies.VoteCounterStrategy.ApplyOperation(Ama.CRDT.Services.Strategies.ApplyOperationContext! context) -> void
Ama.CRDT.Services.Strategies.VoteCounterStrategy.GeneratePatch(Ama.CRDT.Services.Strategies.GeneratePatchContext! context) -> void
Ama.CRDT.Services.Strategies.VoteCounterStrategy.VoteCounterStrategy(Ama.CRDT.Services.ReplicaContext! replicaContext) -> void
override Ama.CRDT.Models.AverageRegisterValue.GetHashCode() -> int
override Ama.CRDT.Models.CrdtDocument<T>.GetHashCode() -> int
override Ama.CRDT.Models.CrdtGraph.Equals(object? obj) -> bool
override Ama.CRDT.Models.CrdtGraph.GetHashCode() -> int
override Ama.CRDT.Models.CrdtGraph.ToString() -> string!
override Ama.CRDT.Models.CrdtMetadata.Equals(object? obj) -> bool
override Ama.CRDT.Models.CrdtMetadata.GetHashCode() -> int
override Ama.CRDT.Models.CrdtMetadata.ToString() -> string!
override Ama.CRDT.Models.CrdtOperation.GetHashCode() -> int
override Ama.CRDT.Models.CrdtPatch.GetHashCode() -> int
override Ama.CRDT.Models.CrdtTree.Equals(object? obj) -> bool
override Ama.CRDT.Models.CrdtTree.GetHashCode() -> int
override Ama.CRDT.Models.CrdtTree.ToString() -> string!
override Ama.CRDT.Models.Edge.GetHashCode() -> int
override Ama.CRDT.Models.EpochTimestamp.GetHashCode() -> int
override Ama.CRDT.Models.ExclusiveLockPayload.GetHashCode() -> int
override Ama.CRDT.Models.GraphEdgePayload.GetHashCode() -> int
override Ama.CRDT.Models.GraphVertexPayload.GetHashCode() -> int
override Ama.CRDT.Models.LockInfo.Equals(object? obj) -> bool
override Ama.CRDT.Models.LockInfo.GetHashCode() -> int
override Ama.CRDT.Models.LockInfo.ToString() -> string!
override Ama.CRDT.Models.LseqIdentifier.GetHashCode() -> int
override Ama.CRDT.Models.LseqIdentifier.ToString() -> string!
override Ama.CRDT.Models.LseqItem.GetHashCode() -> int
override Ama.CRDT.Models.LseqPathSegment.GetHashCode() -> int
override Ama.CRDT.Models.LwwSetState.Equals(object? obj) -> bool
override Ama.CRDT.Models.LwwSetState.GetHashCode() -> int
override Ama.CRDT.Models.LwwSetState.ToString() -> string!
override Ama.CRDT.Models.OrMapAddItem.GetHashCode() -> int
override Ama.CRDT.Models.OrMapRemoveItem.GetHashCode() -> int
override Ama.CRDT.Models.OrSetAddItem.GetHashCode() -> int
override Ama.CRDT.Models.OrSetRemoveItem.GetHashCode() -> int
override Ama.CRDT.Models.OrSetState.Equals(object? obj) -> bool
override Ama.CRDT.Models.OrSetState.GetHashCode() -> int
override Ama.CRDT.Models.OrSetState.ToString() -> string!
override Ama.CRDT.Models.PnCounterState.Equals(object? obj) -> bool
override Ama.CRDT.Models.PnCounterState.GetHashCode() -> int
override Ama.CRDT.Models.PnCounterState.ToString() -> string!
override Ama.CRDT.Models.PositionalIdentifier.GetHashCode() -> int
override Ama.CRDT.Models.PositionalItem.GetHashCode() -> int
override Ama.CRDT.Models.SequentialTimestamp.GetHashCode() -> int
override Ama.CRDT.Models.Serialization.Converters.ObjectKeyDictionaryJsonConverter.CanConvert(System.Type! typeToConvert) -> bool
override Ama.CRDT.Models.Serialization.Converters.ObjectKeyDictionaryJsonConverter.CreateConverter(System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.Text.Json.Serialization.JsonConverter!
override Ama.CRDT.Models.Serialization.Converters.PolymorphicObjectJsonConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> object?
override Ama.CRDT.Models.Serialization.Converters.PolymorphicObjectJsonConverter.Write(System.Text.Json.Utf8JsonWriter! writer, object! value, System.Text.Json.JsonSerializerOptions! options) -> void
override Ama.CRDT.Models.Serialization.CrdtTimestampJsonConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> Ama.CRDT.Models.ICrdtTimestamp?
override Ama.CRDT.Models.Serialization.CrdtTimestampJsonConverter.Write(System.Text.Json.Utf8JsonWriter! writer, Ama.CRDT.Models.ICrdtTimestamp! value, System.Text.Json.JsonSerializerOptions! options) -> void
override Ama.CRDT.Models.TreeAddNodePayload.GetHashCode() -> int
override Ama.CRDT.Models.TreeMoveNodePayload.GetHashCode() -> int
override Ama.CRDT.Models.TreeNode.Equals(object? obj) -> bool
override Ama.CRDT.Models.TreeNode.GetHashCode() -> int
override Ama.CRDT.Models.TreeNode.ToString() -> string!
override Ama.CRDT.Models.TreeRemoveNodePayload.GetHashCode() -> int
override Ama.CRDT.Models.TwoPhaseGraphState.Equals(object? obj) -> bool
override Ama.CRDT.Models.TwoPhaseGraphState.GetHashCode() -> int
override Ama.CRDT.Models.TwoPhaseGraphState.ToString() -> string!
override Ama.CRDT.Models.TwoPhaseSetState.Equals(object? obj) -> bool
override Ama.CRDT.Models.TwoPhaseSetState.GetHashCode() -> int
override Ama.CRDT.Models.TwoPhaseSetState.ToString() -> string!
override Ama.CRDT.Models.VotePayload.GetHashCode() -> int
override Ama.CRDT.Services.DifferentiateObjectContext.Equals(object? obj) -> bool
override Ama.CRDT.Services.DifferentiateObjectContext.GetHashCode() -> int
override Ama.CRDT.Services.DifferentiateObjectContext.ToString() -> string!
override Ama.CRDT.Services.Strategies.ApplyOperationContext.Equals(object? obj) -> bool
override Ama.CRDT.Services.Strategies.ApplyOperationContext.GetHashCode() -> int
override Ama.CRDT.Services.Strategies.ApplyOperationContext.ToString() -> string!
override Ama.CRDT.Services.Strategies.GeneratePatchContext.Equals(object? obj) -> bool
override Ama.CRDT.Services.Strategies.GeneratePatchContext.GetHashCode() -> int
override Ama.CRDT.Services.Strategies.GeneratePatchContext.ToString() -> string!
override Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.GetHashCode() -> int
static Ama.CRDT.Extensions.ServiceCollectionExtensions.AddCrdt(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Ama.CRDT.Extensions.ServiceCollectionExtensions.AddCrdtComparer<TComparer>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Ama.CRDT.Extensions.ServiceCollectionExtensions.AddCrdtSerializableType<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! discriminator) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Ama.CRDT.Extensions.ServiceCollectionExtensions.AddCrdtTimestampProvider<TProvider>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Ama.CRDT.Extensions.ServiceCollectionExtensions.AddCrdtTimestampType<TTimestamp>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! discriminator) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Ama.CRDT.Models.AverageRegisterValue.operator !=(Ama.CRDT.Models.AverageRegisterValue left, Ama.CRDT.Models.AverageRegisterValue right) -> bool
static Ama.CRDT.Models.AverageRegisterValue.operator ==(Ama.CRDT.Models.AverageRegisterValue left, Ama.CRDT.Models.AverageRegisterValue right) -> bool
static Ama.CRDT.Models.CrdtGraph.operator !=(Ama.CRDT.Models.CrdtGraph? left, Ama.CRDT.Models.CrdtGraph? right) -> bool
static Ama.CRDT.Models.CrdtGraph.operator ==(Ama.CRDT.Models.CrdtGraph? left, Ama.CRDT.Models.CrdtGraph? right) -> bool
static Ama.CRDT.Models.CrdtMetadata.operator !=(Ama.CRDT.Models.CrdtMetadata? left, Ama.CRDT.Models.CrdtMetadata? right) -> bool
static Ama.CRDT.Models.CrdtMetadata.operator ==(Ama.CRDT.Models.CrdtMetadata? left, Ama.CRDT.Models.CrdtMetadata? right) -> bool
static Ama.CRDT.Models.CrdtOperation.operator !=(Ama.CRDT.Models.CrdtOperation left, Ama.CRDT.Models.CrdtOperation right) -> bool
static Ama.CRDT.Models.CrdtOperation.operator ==(Ama.CRDT.Models.CrdtOperation left, Ama.CRDT.Models.CrdtOperation right) -> bool
static Ama.CRDT.Models.CrdtPatch.operator !=(Ama.CRDT.Models.CrdtPatch left, Ama.CRDT.Models.CrdtPatch right) -> bool
static Ama.CRDT.Models.CrdtPatch.operator ==(Ama.CRDT.Models.CrdtPatch left, Ama.CRDT.Models.CrdtPatch right) -> bool
static Ama.CRDT.Models.CrdtTree.operator !=(Ama.CRDT.Models.CrdtTree? left, Ama.CRDT.Models.CrdtTree? right) -> bool
static Ama.CRDT.Models.CrdtTree.operator ==(Ama.CRDT.Models.CrdtTree? left, Ama.CRDT.Models.CrdtTree? right) -> bool
static Ama.CRDT.Models.Edge.operator !=(Ama.CRDT.Models.Edge left, Ama.CRDT.Models.Edge right) -> bool
static Ama.CRDT.Models.Edge.operator ==(Ama.CRDT.Models.Edge left, Ama.CRDT.Models.Edge right) -> bool
static Ama.CRDT.Models.EpochTimestamp.operator !=(Ama.CRDT.Models.EpochTimestamp left, Ama.CRDT.Models.EpochTimestamp right) -> bool
static Ama.CRDT.Models.EpochTimestamp.operator ==(Ama.CRDT.Models.EpochTimestamp left, Ama.CRDT.Models.EpochTimestamp right) -> bool
static Ama.CRDT.Models.ExclusiveLockPayload.operator !=(Ama.CRDT.Models.ExclusiveLockPayload left, Ama.CRDT.Models.ExclusiveLockPayload right) -> bool
static Ama.CRDT.Models.ExclusiveLockPayload.operator ==(Ama.CRDT.Models.ExclusiveLockPayload left, Ama.CRDT.Models.ExclusiveLockPayload right) -> bool
static Ama.CRDT.Models.GraphEdgePayload.operator !=(Ama.CRDT.Models.GraphEdgePayload left, Ama.CRDT.Models.GraphEdgePayload right) -> bool
static Ama.CRDT.Models.GraphEdgePayload.operator ==(Ama.CRDT.Models.GraphEdgePayload left, Ama.CRDT.Models.GraphEdgePayload right) -> bool
static Ama.CRDT.Models.GraphVertexPayload.operator !=(Ama.CRDT.Models.GraphVertexPayload left, Ama.CRDT.Models.GraphVertexPayload right) -> bool
static Ama.CRDT.Models.GraphVertexPayload.operator ==(Ama.CRDT.Models.GraphVertexPayload left, Ama.CRDT.Models.GraphVertexPayload right) -> bool
static Ama.CRDT.Models.LockInfo.operator !=(Ama.CRDT.Models.LockInfo? left, Ama.CRDT.Models.LockInfo? right) -> bool
static Ama.CRDT.Models.LockInfo.operator ==(Ama.CRDT.Models.LockInfo? left, Ama.CRDT.Models.LockInfo? right) -> bool
static Ama.CRDT.Models.LseqIdentifier.operator !=(Ama.CRDT.Models.LseqIdentifier left, Ama.CRDT.Models.LseqIdentifier right) -> bool
static Ama.CRDT.Models.LseqIdentifier.operator ==(Ama.CRDT.Models.LseqIdentifier left, Ama.CRDT.Models.LseqIdentifier right) -> bool
static Ama.CRDT.Models.LseqItem.operator !=(Ama.CRDT.Models.LseqItem left, Ama.CRDT.Models.LseqItem right) -> bool
static Ama.CRDT.Models.LseqItem.operator ==(Ama.CRDT.Models.LseqItem left, Ama.CRDT.Models.LseqItem right) -> bool
static Ama.CRDT.Models.LseqPathSegment.operator !=(Ama.CRDT.Models.LseqPathSegment left, Ama.CRDT.Models.LseqPathSegment right) -> bool
static Ama.CRDT.Models.LseqPathSegment.operator ==(Ama.CRDT.Models.LseqPathSegment left, Ama.CRDT.Models.LseqPathSegment right) -> bool
static Ama.CRDT.Models.LwwSetState.operator !=(Ama.CRDT.Models.LwwSetState? left, Ama.CRDT.Models.LwwSetState? right) -> bool
static Ama.CRDT.Models.LwwSetState.operator ==(Ama.CRDT.Models.LwwSetState? left, Ama.CRDT.Models.LwwSetState? right) -> bool
static Ama.CRDT.Models.OrMapAddItem.operator !=(Ama.CRDT.Models.OrMapAddItem left, Ama.CRDT.Models.OrMapAddItem right) -> bool
static Ama.CRDT.Models.OrMapAddItem.operator ==(Ama.CRDT.Models.OrMapAddItem left, Ama.CRDT.Models.OrMapAddItem right) -> bool
static Ama.CRDT.Models.OrMapRemoveItem.operator !=(Ama.CRDT.Models.OrMapRemoveItem left, Ama.CRDT.Models.OrMapRemoveItem right) -> bool
static Ama.CRDT.Models.OrMapRemoveItem.operator ==(Ama.CRDT.Models.OrMapRemoveItem left, Ama.CRDT.Models.OrMapRemoveItem right) -> bool
static Ama.CRDT.Models.OrSetAddItem.operator !=(Ama.CRDT.Models.OrSetAddItem left, Ama.CRDT.Models.OrSetAddItem right) -> bool
static Ama.CRDT.Models.OrSetAddItem.operator ==(Ama.CRDT.Models.OrSetAddItem left, Ama.CRDT.Models.OrSetAddItem right) -> bool
static Ama.CRDT.Models.OrSetRemoveItem.operator !=(Ama.CRDT.Models.OrSetRemoveItem left, Ama.CRDT.Models.OrSetRemoveItem right) -> bool
static Ama.CRDT.Models.OrSetRemoveItem.operator ==(Ama.CRDT.Models.OrSetRemoveItem left, Ama.CRDT.Models.OrSetRemoveItem right) -> bool
static Ama.CRDT.Models.OrSetState.operator !=(Ama.CRDT.Models.OrSetState? left, Ama.CRDT.Models.OrSetState? right) -> bool
static Ama.CRDT.Models.OrSetState.operator ==(Ama.CRDT.Models.OrSetState? left, Ama.CRDT.Models.OrSetState? right) -> bool
static Ama.CRDT.Models.PnCounterState.operator !=(Ama.CRDT.Models.PnCounterState? left, Ama.CRDT.Models.PnCounterState? right) -> bool
static Ama.CRDT.Models.PnCounterState.operator ==(Ama.CRDT.Models.PnCounterState? left, Ama.CRDT.Models.PnCounterState? right) -> bool
static Ama.CRDT.Models.PositionalIdentifier.operator !=(Ama.CRDT.Models.PositionalIdentifier left, Ama.CRDT.Models.PositionalIdentifier right) -> bool
static Ama.CRDT.Models.PositionalIdentifier.operator ==(Ama.CRDT.Models.PositionalIdentifier left, Ama.CRDT.Models.PositionalIdentifier right) -> bool
static Ama.CRDT.Models.PositionalItem.operator !=(Ama.CRDT.Models.PositionalItem left, Ama.CRDT.Models.PositionalItem right) -> bool
static Ama.CRDT.Models.PositionalItem.operator ==(Ama.CRDT.Models.PositionalItem left, Ama.CRDT.Models.PositionalItem right) -> bool
static Ama.CRDT.Models.SequentialTimestamp.operator !=(Ama.CRDT.Models.SequentialTimestamp left, Ama.CRDT.Models.SequentialTimestamp right) -> bool
static Ama.CRDT.Models.SequentialTimestamp.operator ==(Ama.CRDT.Models.SequentialTimestamp left, Ama.CRDT.Models.SequentialTimestamp right) -> bool
static Ama.CRDT.Models.Serialization.Converters.PolymorphicObjectJsonConverter.Instance.get -> Ama.CRDT.Models.Serialization.Converters.PolymorphicObjectJsonConverter!
static Ama.CRDT.Models.Serialization.CrdtJsonContext.DefaultOptions.get -> System.Text.Json.JsonSerializerOptions!
static Ama.CRDT.Models.Serialization.CrdtJsonContext.MetadataCompactOptions.get -> System.Text.Json.JsonSerializerOptions!
static Ama.CRDT.Models.Serialization.CrdtJsonTypeInfoResolver.ApplyCrdtModifiers(System.Text.Json.Serialization.Metadata.JsonTypeInfo! jsonTypeInfo) -> void
static Ama.CRDT.Models.Serialization.CrdtJsonTypeInfoResolver.Instance.get -> Ama.CRDT.Models.Serialization.CrdtJsonTypeInfoResolver!
static Ama.CRDT.Models.Serialization.CrdtMetadataJsonResolver.ApplyMetadataModifiers(System.Text.Json.Serialization.Metadata.JsonTypeInfo! jsonTypeInfo) -> void
static Ama.CRDT.Models.Serialization.CrdtMetadataJsonResolver.Instance.get -> Ama.CRDT.Models.Serialization.CrdtMetadataJsonResolver!
static Ama.CRDT.Models.Serialization.CrdtTimestampJsonConverter.Register(string! discriminator, System.Type! type) -> void
static Ama.CRDT.Models.TreeAddNodePayload.operator !=(Ama.CRDT.Models.TreeAddNodePayload left, Ama.CRDT.Models.TreeAddNodePayload right) -> bool
static Ama.CRDT.Models.TreeAddNodePayload.operator ==(Ama.CRDT.Models.TreeAddNodePayload left, Ama.CRDT.Models.TreeAddNodePayload right) -> bool
static Ama.CRDT.Models.TreeMoveNodePayload.operator !=(Ama.CRDT.Models.TreeMoveNodePayload left, Ama.CRDT.Models.TreeMoveNodePayload right) -> bool
static Ama.CRDT.Models.TreeMoveNodePayload.operator ==(Ama.CRDT.Models.TreeMoveNodePayload left, Ama.CRDT.Models.TreeMoveNodePayload right) -> bool
static Ama.CRDT.Models.TreeNode.operator !=(Ama.CRDT.Models.TreeNode? left, Ama.CRDT.Models.TreeNode? right) -> bool
static Ama.CRDT.Models.TreeNode.operator ==(Ama.CRDT.Models.TreeNode? left, Ama.CRDT.Models.TreeNode? right) -> bool
static Ama.CRDT.Models.TreeRemoveNodePayload.operator !=(Ama.CRDT.Models.TreeRemoveNodePayload left, Ama.CRDT.Models.TreeRemoveNodePayload right) -> bool
static Ama.CRDT.Models.TreeRemoveNodePayload.operator ==(Ama.CRDT.Models.TreeRemoveNodePayload left, Ama.CRDT.Models.TreeRemoveNodePayload right) -> bool
static Ama.CRDT.Models.TwoPhaseGraphState.operator !=(Ama.CRDT.Models.TwoPhaseGraphState? left, Ama.CRDT.Models.TwoPhaseGraphState? right) -> bool
static Ama.CRDT.Models.TwoPhaseGraphState.operator ==(Ama.CRDT.Models.TwoPhaseGraphState? left, Ama.CRDT.Models.TwoPhaseGraphState? right) -> bool
static Ama.CRDT.Models.TwoPhaseSetState.operator !=(Ama.CRDT.Models.TwoPhaseSetState? left, Ama.CRDT.Models.TwoPhaseSetState? right) -> bool
static Ama.CRDT.Models.TwoPhaseSetState.operator ==(Ama.CRDT.Models.TwoPhaseSetState? left, Ama.CRDT.Models.TwoPhaseSetState? right) -> bool
static Ama.CRDT.Models.VotePayload.operator !=(Ama.CRDT.Models.VotePayload left, Ama.CRDT.Models.VotePayload right) -> bool
static Ama.CRDT.Models.VotePayload.operator ==(Ama.CRDT.Models.VotePayload left, Ama.CRDT.Models.VotePayload right) -> bool
static Ama.CRDT.Services.DifferentiateObjectContext.operator !=(Ama.CRDT.Services.DifferentiateObjectContext? left, Ama.CRDT.Services.DifferentiateObjectContext? right) -> bool
static Ama.CRDT.Services.DifferentiateObjectContext.operator ==(Ama.CRDT.Services.DifferentiateObjectContext? left, Ama.CRDT.Services.DifferentiateObjectContext? right) -> bool
static Ama.CRDT.Services.Strategies.ApplyOperationContext.operator !=(Ama.CRDT.Services.Strategies.ApplyOperationContext? left, Ama.CRDT.Services.Strategies.ApplyOperationContext? right) -> bool
static Ama.CRDT.Services.Strategies.ApplyOperationContext.operator ==(Ama.CRDT.Services.Strategies.ApplyOperationContext? left, Ama.CRDT.Services.Strategies.ApplyOperationContext? right) -> bool
static Ama.CRDT.Services.Strategies.GeneratePatchContext.operator !=(Ama.CRDT.Services.Strategies.GeneratePatchContext? left, Ama.CRDT.Services.Strategies.GeneratePatchContext? right) -> bool
static Ama.CRDT.Services.Strategies.GeneratePatchContext.operator ==(Ama.CRDT.Services.Strategies.GeneratePatchContext? left, Ama.CRDT.Services.Strategies.GeneratePatchContext? right) -> bool
static Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.operator !=(Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry left, Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry right) -> bool
static Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.operator ==(Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry left, Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry right) -> bool
static readonly Ama.CRDT.Models.EpochTimestamp.MinValue -> Ama.CRDT.Models.EpochTimestamp
static readonly Ama.CRDT.Models.SequentialTimestamp.MinValue -> Ama.CRDT.Models.SequentialTimestamp
~Ama.CRDT.Models.CrdtDocument<T>.Equals(Ama.CRDT.Models.CrdtDocument<T> other) -> bool
~override Ama.CRDT.Models.AverageRegisterValue.Equals(object obj) -> bool
~override Ama.CRDT.Models.AverageRegisterValue.ToString() -> string
~override Ama.CRDT.Models.CrdtDocument<T>.Equals(object obj) -> bool
~override Ama.CRDT.Models.CrdtDocument<T>.ToString() -> string
~override Ama.CRDT.Models.CrdtOperation.Equals(object obj) -> bool
~override Ama.CRDT.Models.CrdtOperation.ToString() -> string
~override Ama.CRDT.Models.CrdtPatch.Equals(object obj) -> bool
~override Ama.CRDT.Models.CrdtPatch.ToString() -> string
~override Ama.CRDT.Models.Edge.Equals(object obj) -> bool
~override Ama.CRDT.Models.Edge.ToString() -> string
~override Ama.CRDT.Models.EpochTimestamp.Equals(object obj) -> bool
~override Ama.CRDT.Models.EpochTimestamp.ToString() -> string
~override Ama.CRDT.Models.ExclusiveLockPayload.Equals(object obj) -> bool
~override Ama.CRDT.Models.ExclusiveLockPayload.ToString() -> string
~override Ama.CRDT.Models.GraphEdgePayload.Equals(object obj) -> bool
~override Ama.CRDT.Models.GraphEdgePayload.ToString() -> string
~override Ama.CRDT.Models.GraphVertexPayload.Equals(object obj) -> bool
~override Ama.CRDT.Models.GraphVertexPayload.ToString() -> string
~override Ama.CRDT.Models.LseqIdentifier.Equals(object obj) -> bool
~override Ama.CRDT.Models.LseqItem.Equals(object obj) -> bool
~override Ama.CRDT.Models.LseqItem.ToString() -> string
~override Ama.CRDT.Models.LseqPathSegment.Equals(object obj) -> bool
~override Ama.CRDT.Models.LseqPathSegment.ToString() -> string
~override Ama.CRDT.Models.OrMapAddItem.Equals(object obj) -> bool
~override Ama.CRDT.Models.OrMapAddItem.ToString() -> string
~override Ama.CRDT.Models.OrMapRemoveItem.Equals(object obj) -> bool
~override Ama.CRDT.Models.OrMapRemoveItem.ToString() -> string
~override Ama.CRDT.Models.OrSetAddItem.Equals(object obj) -> bool
~override Ama.CRDT.Models.OrSetAddItem.ToString() -> string
~override Ama.CRDT.Models.OrSetRemoveItem.Equals(object obj) -> bool
~override Ama.CRDT.Models.OrSetRemoveItem.ToString() -> string
~override Ama.CRDT.Models.PositionalIdentifier.Equals(object obj) -> bool
~override Ama.CRDT.Models.PositionalIdentifier.ToString() -> string
~override Ama.CRDT.Models.PositionalItem.Equals(object obj) -> bool
~override Ama.CRDT.Models.PositionalItem.ToString() -> string
~override Ama.CRDT.Models.SequentialTimestamp.Equals(object obj) -> bool
~override Ama.CRDT.Models.SequentialTimestamp.ToString() -> string
~override Ama.CRDT.Models.TreeAddNodePayload.Equals(object obj) -> bool
~override Ama.CRDT.Models.TreeAddNodePayload.ToString() -> string
~override Ama.CRDT.Models.TreeMoveNodePayload.Equals(object obj) -> bool
~override Ama.CRDT.Models.TreeMoveNodePayload.ToString() -> string
~override Ama.CRDT.Models.TreeRemoveNodePayload.Equals(object obj) -> bool
~override Ama.CRDT.Models.TreeRemoveNodePayload.ToString() -> string
~override Ama.CRDT.Models.VotePayload.Equals(object obj) -> bool
~override Ama.CRDT.Models.VotePayload.ToString() -> string
~override Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.Equals(object obj) -> bool
~override Ama.CRDT.Services.Strategies.SortedSetStrategy.LcsDiffEntry.ToString() -> string
~static Ama.CRDT.Models.CrdtDocument<T>.operator !=(Ama.CRDT.Models.CrdtDocument<T> left, Ama.CRDT.Models.CrdtDocument<T> right) -> bool
~static Ama.CRDT.Models.CrdtDocument<T>.operator ==(Ama.CRDT.Models.CrdtDocument<T> left, Ama.CRDT.Models.CrdtDocument<T> right) -> bool
